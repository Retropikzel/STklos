;;;;
;;;; compfile.stk       -- STklos File Compiler
;;;;
;;;; Copyright Â© 2001-2021 Erick Gallesio - I3S-CNRS/ESSI <eg@unice.fr>
;;;;
;;;;
;;;; This program is free software; you can redistribute it and/or modify
;;;; it under the terms of the GNU General Public License as published by
;;;; the Free Software Foundation; either version 2 of the License, or
;;;; (at your option) any later version.
;;;;
;;;; This program is distributed in the hope that it will be useful,
;;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;;; GNU General Public License for more details.
;;;;
;;;; You should have received a copy of the GNU General Public License
;;;; along with this program; if not, write to the Free Software
;;;; Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307,
;;;; USA.
;;;;
;;;;           Author: Erick Gallesio [eg@unice.fr]
;;;;    Creation date: 17-Mar-2001 12:11 (eg)
;;;; Last file update: 11-May-2021 19:24 (eg)
;;;;

(select-module STKLOS-COMPILER)

(define (compile-file input output)

  (define (compute-file-informations initial-globals)
    (let ((globs (let loop ((lst (compiler-known-globals))
                            (res '()))
                   (cond
                     ((null? lst)
                      res)
                     ((memv (car lst) initial-globals)
                      (loop (cdr lst) res))
                     (else
                      (loop (cdr lst) (cons (car lst)
                                            res)))))))
      ;; Return informations
      (list :version   (version)
            :globals   globs
            :expanders (expander-published-sources))))

  (let ((out      (open-output-file output))
        (globs    (compiler-known-globals))
        (tm       (clock))
        (copts    (compiler:warn-use-undefined-postpone)))

    ;; Clear the list containing  macros sources
    (expander-published-reset!)

    ;; Defer warning til the end of the compilation of file
    ;(compiler:warn-use-undefined-postpone #t)

    (fluid-let ((*code-instr* '())
                (*code-constants* '()))
      ;; Read the source file
      (include-file input)
      (emit 'END-OF-CODE)

      ;; Write the header
      (format out "#!/usr/bin/env stklos-script\n")
      (format out "; A -*- Scheme -*- generated file *DO NOT EDIT**\n")
      (format out "STklos ~S\n" (compute-file-informations globs))

      (let ((code (assemble (reverse! *code-instr*))))
        (when (compiler:show-assembly-code)
          ;;Write the assembly code and code vector
          (format out "\n#|\n")
          (disassemble-code code out)
          (format out "\n~S\n|\#\n" code))

        ;; Write new constants as a vector
        (format out "#~S\n" *code-constants*)

        ;; Write byte-code
        (%dump-code out code))

      ;; Close file
      (close-output-port out))

    ;; Show undefined symbols
    (compiler-show-undefined-symbols)

    ;; Display time used to compile file
    (when (and (interactive-port? (current-input-port))
               (compiler:time-display))
      (format #t "Compilation time ~S ms\n" (exact (round (- (clock) tm)))))

    ;; Restore Compiler flags
    (compiler:warn-use-undefined-postpone copts)))

;; ======================================================================
(select-module STklos)
(define compile-file (in-module STKLOS-COMPILER compile-file))

(provide "compfile")
