;;;;
;;;; module.stk -- Module stuff
;;;;
;;;; Copyright Â© 2000-2021 Erick Gallesio - I3S-CNRS/ESSI <eg@unice.fr>
;;;;
;;;;
;;;; This program is free software; you can redistribute it and/or modify
;;;; it under the terms of the GNU General Public License as published by
;;;; the Free Software Foundation; either version 2 of the License, or
;;;; (at your option) any later version.
;;;;
;;;; This program is distributed in the hope that it will be useful,
;;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;;; GNU General Public License for more details.
;;;;
;;;; You should have received a copy of the GNU General Public License
;;;; along with this program; if not, write to the Free Software
;;;; Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307,
;;;; USA.
;;;;
;;;;           Author: Erick Gallesio [eg@unice.fr]
;;;;    Creation date:  1-Jun-2000 12:26 (eg)
;;;; Last file update: 22-Oct-2021 11:04 (eg)
;;;;




;;=============================================================================
;;
;;                              SYMBOL-VALUE*
;;
;;=============================================================================
#|
<doc EXT symbol-value*
 * (symbol-value* symbol module)
 * (symbol-value* symbol module default)
 *
 * Returns the value bound to |symbol| in |module|. If |symbol| is not bound,
 * an error is signaled if no |default| is provided, otherwise |symbol-value|
 * returns |default|.
 * @l
 * Note that this function searches the value of |symbol| in |module|
 * ,(bold "and") all the modules it imports whereas |symbol-value| searches
 * only in |module|.
doc>
|#
(define (symbol-value* name module :optional (default #f default?))
  (let ((absent (gensym)))
    (let Loop ((all-mods (cons module (module-imports module))))
      (if (null? all-mods)
          ;; Symbol was absent in the module and its imported modules
          (if default?
              default
              (error 'symbol-value* "symbol ``~S'' not found" name))
          ;; Let's see
          (let ((val (symbol-value name (car all-mods) absent)))
            (if (eq? val absent)
                (Loop (cdr all-mods))
                val))))))

;;=============================================================================
;;
;;                              SELECT-MODULE
;;
;;=============================================================================
#|
<doc EXT-SYNTAX select-module
 * (select-module <name>)
 *
 * Changes the value of the current module to the module with the given |name|.
 * The expressions evaluated after |select-module| will take place in
 * module |name| environment.  Module |name| must have been created
 * previously by a |define-module|. The result of |select-module| is
 * ,(emph "void").
 * |Select-module| is particularly useful when debugging since it
 * allows to place toplevel evaluation in a particular module. The
 * following transcript shows an usage of |select-module|.
 * ,(footnote [This transcript uses the default toplevel loop
 *             which displays the name of the current module in the evaluator
 *             prompt.]):
 * @lisp
 * stklos> (define foo 1)
 * stklos> (define-module bar
 *           (define foo 2))
 * stklos> foo
 * 1
 * stklos> (select-module bar)
 * bar> foo
 * 2
 * bar> (select-module stklos)
 * stklos>
 * @end lisp
doc>
|#

(define-macro (select-module name)
  `(%%set-current-module (find-module ',name)))


;;=============================================================================
;;
;;                              DEFINE-MODULE
;;
;;=============================================================================
#|
<doc EXT-SYNTAX define-module
 * (define-module <name> <expr1> <expr2> ...)
 *
 * |Define-module| evaluates the expressions |<expr1>|, |<expr2>| ... which
 * constitute the body of the module |<name>| in the environment of that module.
 * |Name| must be a valid symbol. If this symbol has not already been used to
 * define a module, a new module, named |name|, is created.
 * Otherwise, the expressions |<expr1>|, |<expr2>| ... are evaluated in
 * the environment of the (old) module |<name>|
 * ,(footnote [In fact |define-module| on a given name
 *           defines a new module only the first time it is invoked on this name.
 *           By this way, interactively reloading a module does not define
 *           a new entity, and the other modules which use it are not altered.]).
 * Definitions done in a module are local to the module and do not interact with
 * the definitions in other modules. Consider the following definitions,
 * @lisp
 * (define-module M1
 *    (define a 1))
 *
 * (define-module M2
 *   (define a 2)
 *   (define b (* 2 x)))
 * @end lisp
 *
 * Here, two modules are defined and they both bind the symbol |a| to a
 * value. However, since |a| has been defined in two distinct modules
 * they denote two different locations.
 * @l
 * The |STklos| module, which is predefined, is a special module which
 * contains all the ,(emph "global variables") of a R5RS program.  A symbol
 * defined in the |STklos| module, if not hidden by a local definition, is
 * always visible from inside a module. So, in the previous exemple, the
 * |x| symbol refers the |x| symbol defined in the |STklos| module.
 * @l
 * The result of |define-module| is ,(emph "void").
doc>
|#
(define %modules-stack  '())
(define %module-create  (lambda (name)
                          (set! %modules-stack (cons (current-module)
                                                     %modules-stack))
                          (%create-module name)))

(define %module-restore (lambda ()
                          (let ((previous (car %modules-stack)))
                            (set! %modules-stack (cdr %modules-stack))
                            previous)))

(define %module-handler (lambda (c)
                          (let ((mod (%module-restore)))
                            ;; Push c on the module stack since env will be broken
                            ;; by the module reset!
                            (set! %modules-stack (cons c %modules-stack))
                            (%%set-current-module mod)
                            ;; Hack: Here %module-restore will get back the old c
                            (raise (%module-restore)))))

(define-macro (define-module name . body)
  `(with-handler
      %module-handler
      (%%set-current-module (%module-create ',name))
      ,@body
      (%%set-current-module (%module-restore))
      (values (void) ',name)))


;;=============================================================================
;;
;;                              IMPORT
;;
;;=============================================================================
#|
<doc EXT-SYNTAX import
 * (import <module1> <module2> ...)
 *
 * Specifies the modules which are imported by the current module.
 * Importing a module makes the symbols it exports visible to the
 * importer, if not hidden by local definitions. When a symbol
 * is exported by several of the imported modules, the location denoted by
 * this symbol in the importer module correspond to the one of the last module
 * in the list
 * @lisp
 * (<module1> <module2> ...)
 * @end lisp
 * which exports it.
 * @l
 * If several |import| clauses appear in a module, the set of
 * imported modules  is determined by appending the various list of modules
 * in their apparition order.
 *
 * @lisp
 * (define-module M1
 *   (export a b)
 *   (define a 'M1-a)
 *   (define b 'M1-b))
 *
 * (define-module M2
 *   (export b c d)
 *   (define b 'M2-b)
 *   (define c 'M2-c)
 *   (define d 'M2-d))
 *
 * (define-module M3
 *   (import M1 M2)
 *   (display (list a b c d)))  @print{} (M1-a M2-b M2-c M2-d)
 *
 * (define-module M4
 *   (import M2 M1)
 *   (display (list a b c d)))  @print{} (M1-a M1-b M2-c M2-d)
 * @end lisp
 *
 * It is also possible to import partially (i.e. not all
 * exported symbols) from a module, as shown below:
 * @lisp
 * (define-module M5
 *   (import (M2 c d) M1)
 *   (display (list a b c d)))  @print{} (M1-a M1-b M2-c M2-d)
 * @end lisp
 * In this case, only the symbols |c| and |d| are imported from
 * module |M2|.
 * @l
 * ,(bold "Note:") Importations are not ,(emph "transitive"): when
 * the module ,(emph "C") imports the module ,(emph "B") which is an importer
 * of module ,(emph "A") the symbols of ,(emph "A") are not visible
 * from ,(emph "C"), except  by explicitly importing the ,(emph "A")
 * module from ,(emph "C").
 * @l
 * ,(bold "Note:") The module |STklos|, which contains the ,(emph "global
 * variables") is always implicitly imported from a module. Furthermore,
 * this module is always placed at the end of the list of imported modules.
doc>
|#
(define (%module-import importer modules)
  (let Loop ((l modules)
             (res (cdr (reverse! (module-imports importer)))))
    (if (null? l)
        (%module-imports-set! importer res)
        (let ((mod (find-module (car l) #f)))
          (if mod
              (Loop (cdr l)
                      (if (or (eq? mod importer) ; itself
                              (memq mod res))    ; already imported
                          res
                          (cons mod res)))       ; add it to our result
              (error 'import "module `~S' does not exist" (car l)))))))

(define (%module-aliases module-name symbols export?)

  (define (old-module-exports mod)
     (let ((l (module-exports mod)))
          (if (and (not (null? l))
                   (pair? (caar l)))
              (map car l)
              l)))

  ;; define aliases in the current module of symbols from module-name
  (let ((module (find-module module-name #f)))
    (unless module
      (error 'import "cannot find module ~S" module-name))
    (let ((exports (old-module-exports module)))
      (for-each (lambda (x)
                  (if (memq x exports)
                      (%symbol-alias x x module)
                      (error 'import "symbol ~S is not exported from module ~S"
                             x module-name)))
                symbols)))
  ;; if export? is true, export the given symbols
  (when export?
    (%do-exports (current-module) symbols)))


;;(define-macro (import . modules)
;;  (if (null? modules)
;;      '()
;;      `(%module-import (current-module) ',modules)))

(define-macro (import . modules)

  (define (split-modules lst)
    (let loop ((lst modules)
               (full '())
               (part '()))
      (cond
        ((null? lst)
         (values (reverse! full) (reverse! part)))
        ((symbol? (car lst))
         ;; full import
         (loop (cdr lst)
               (cons (car lst) full)
               part))
        ((and (pair? (car lst)) (symbol? (caar lst)) (null? (cdar lst)))
         ;; a list which contains only a symbol. This is a full import
         (loop (cdr lst)
               (cons (caar lst) full)
               part))
        ((and (pair? (car lst)) (every symbol? (car lst)))
         ;; a partial import
         (loop (cdr lst)
               full
               (cons (car lst) part)))
        (else (error 'import "bad import clause ~S" (car lst))))))

  (if (null? modules)
      '()
      (receive (full part)
         (split-modules modules)
         (cond
           ((null? part)
            ;; Only full exports
            `(%module-import (current-module) ',full))
           ((null? full)
            ;; Only partial exports
            `(begin
               ,@(map (lambda (x) `(%module-aliases ',(car x) ',(cdr x) #f))
                      part)))
           (else
            `(begin
               (%module-import (current-module) ',full)
               ,@(map (lambda (x) `(%module-aliases ',(car x) ',(cdr x) #f))
                      part)))))))


;;=============================================================================
;;
;;                              EXPORT
;;
;;=============================================================================
#|
<doc EXT-SYNTAX export
 * (export <symbol1> <symbol2> ...)
 *
 * Specifies the symbols which are exported (i.e. ,(emph "visible")) outside
 * the current module. By default, symbols defined in a module are not
 * visible outside this module, excepted if they appear in an |export|
 * clause.
 * @l
 * If several |export| clauses appear in a module, the set of
 * exported symbols is determined by ``,(emph "unionizing")'' symbols exported
 * in all the |export| clauses.
 * @l
 * The result of |export| is ,(emph "void").
doc>
|#
(define (%parse-exports symbols)
  ;; Used at compile-time: returns a list of pairs ((name . exported-name) ... )

  (let Loop ((l symbols) (res '()))
    (cond
     ((null? l)
          ;; Hack to avoid useless compilation messages.
          (for-each register-new-global!  (map car res))
          (reverse! res))
     ((symbol? (car l))
          ;; export a single identifier
          (let ((s (car l)))
            (Loop (cdr l)
                  (cons (cons s s)
                        res))))
     ((and (pair? (car l)) (eq? (caar l) 'rename))
          ;; export with renaming: (rename old new)
          (let ((symbs (cdar l)))
            (unless (and (= (length symbs) 2)
                         (symbol? (car symbs))
                         (symbol? (cadr symbs)))
              (error 'export "bad renaming clause ~S" (car l)))
            (Loop (cdr l)
                  (cons (cons (car symbs) (cadr symbs))
                        res))))
     (else
          (error 'export "bad exportation `~S'" (car l))))))

(define (%do-exports lib symbols)

  (define (add-symbol name rename lst)
    (let ((old (assq name lst)))
      (if old
          (let ((old-rename (cdr old)))
            (unless (or (eq? name old-rename)
                        (eq? old-rename rename))
              (error 'export "exported symbol ~s was previously renamed as ~S"
                     name old-rename))
            (set-cdr! old rename)
            lst)
          (cons (cons name rename) lst))))

  (let Loop ((l symbols) (res (module-exports lib)))
    (cond
     ((null? l) (%module-exports-set! lib res))
     (else
      (let ((symbs (car l)))
        (Loop (cdr l)
              (add-symbol (car symbs) (cdr symbs) res)))))))



;; FIXME: For compatibility (should be deleted soon)
(define (%module-export module . symbols)
  (%do-exports module symbols))


(define-macro (export . symbols)
  (let ((s (%parse-exports symbols)))
    `(%do-exports (current-module) ',s)))


(define-macro (export-syntax . arg)
  ;; This is only an approximation. Must be rewritten
  `(%%publish-syntax ,@arg))

;;=============================================================================
;;
;;                              IN-MODULE
;;
;;=============================================================================
#|
<doc EXT-SYNTAX in-module
 * (in-module mod s)
 * (in-module mod s default)
 *
 * This form returns the value of symbol with name |s| in the module with name
 * |mod|. If this symbol is not bound,  an error is signaled if no |default| is
 * provided, otherwise |in-module| returns |default|. Note that the value of |s|
 * is searched in |mod| and all the modules it imports.
 * @l
 * This form is in fact a shortcut. In effect,
 * @lisp
 * (in-module my-module foo)
 * @end lisp
 * @l
 * is equivalent to
 * @lisp
 * (symbol-value* 'foo (find-module 'my-module))
 * @end lisp
doc>
|#
(define-macro (in-module mod symb . default)
  `(apply symbol-value* ',symb (find-module ',mod) ',default))
