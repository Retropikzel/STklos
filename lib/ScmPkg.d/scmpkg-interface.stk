;;;;
;;;; scmpkg-interface.stk	-- ScmPkg interfaces in STklos
;;;; 
;;;; Copyright Â© 2006-2007 Erick Gallesio - I3S-CNRS/ESSI <eg@essi.fr>
;;;; 
;;;; 
;;;; This program is free software; you can redistribute it and/or modify
;;;; it under the terms of the GNU General Public License as published by
;;;; the Free Software Foundation; either version 2 of the License, or
;;;; (at your option) any later version.
;;;; 
;;;; This program is distributed in the hope that it will be useful,
;;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;;; GNU General Public License for more details.
;;;; 
;;;; You should have received a copy of the GNU General Public License
;;;; along with this program; if not, write to the Free Software
;;;; Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, 
;;;; USA.
;;;; 
;;;;           Author: Erick Gallesio [eg@essi.fr]
;;;;    Creation date: 11-Dec-2006 14:39 (eg)
;;;; Last file update:  1-Jun-2007 14:12 (eg)
;;;;


(define-struct scmpkg-package
  name
  version
  language
  source
  suffix
  imports
  exports
  macros
  syntaxes)

(define (%new-scmpkg-package name)
  (make-scmpkg-package name		; name
		       'v0.0.0		; version
		       '(r5rs)		; language
		       #f		; source
		       #f		; suffix
		       '()		; imports
		       '()		; exports
		       '()		; macros
		       '()		; syntaxes
		       ))


(define-macro (%push! lst v)
  `(set! ,lst (cons ,v ,lst)))


(define *ignored-interface-clauses*
  (append
      ;; meta-informations
      '(maintainer author description keywords license homepage snow)
      ;; Language specifics meta-informations
      (map car *scmpkg-languages*)))						 

;; ======================================================================
;;	interface ...
;; ======================================================================
(define-macro (interface name . body)

  (define (find-imports lang imp)
    (let ((main (car lang)))
      (if (member main '(r5rs stklos))
	  imp
	  (append! (cons (string->symbol (format "_~a" main))
			 (map (lambda (x) (string->symbol (format "_~a-~a" main x)))
			      (cdr lang)))
		   imp))))

  (define (merge-imports-exports imp exp)
    ;; When we have a "from" export clauses, add its package to imports
    (let ((add (filter-map (lambda(x)
			     (and (pair? x) (eq? (car x) 'from)
				  (if (= (length x) 2)
				      (cadr x)
				      (cdr x))))
			   exp)))
      (append imp add)))

  (define (do-exports lst)
    (let loop ((lst lst)
	       (symbs '())
	       (aliases '()))
      (cond
	((null? lst)
	 `(begin
	    (export ,@symbs)
	    ,@(map (lambda (x)
		     (if (null? (cdr x))
			 `(%module-aliases ',(car x)
					   (module-exports (find-module ',(car x)))
					   #t)
			 `(%module-aliases ',(car x) ',(cdr x) #t)))
		   aliases)))
	((symbol? (car lst))				; a symbol	
	 (loop (cdr lst)
	       (cons (car lst) symbs)
	       aliases))
	(else						; (from module ...)
	 (loop (cdr lst)
	       symbs
	       (cons (cdar lst) aliases))))))

  (define (publish-syntaxes lst)
    `(%%publish-syntax ,@lst))

  (let* ((pi     (in-module  |ScmPkg| parse-interface))
	 (pkg    (pi name body))
	 (imp    (scmpkg-package-imports pkg))
	 (exp    (reverse (scmpkg-package-exports pkg)))
	 (lang   (scmpkg-package-language pkg))
	 (req    (merge-imports-exports imp exp))
	 (allreq (find-imports lang req))
	 (allimp (find-imports lang imp))
	 (macs   (append (scmpkg-package-macros pkg)
			 (scmpkg-package-syntaxes pkg))))
    `(begin
       ;; Require scmpkg-support
       (require-library "scmpkg-support")
       ;; Require all the imported modules
       ,@(map (lambda (x)
		`(require-for-syntax ,(symbol->string (if (pair? x) (car x) x))))
	      allreq)
       ,@(map (lambda (x) `(require ,(symbol->string (if (pair? x) (car x) x))))
	      allreq)
       ;; Define a module for the scmpkg package
       (define-module ,name
	 ;; Imports
	 (import ,@allimp)
	 ;; Exports
	 ,(do-exports exp)
	 ;; Body
	 (include ,(scmpkg-package-source pkg))
	 ;; Publish macros and syntaxes 
	 ,(publish-syntaxes macs))
       ;; Provide
       (provide ,(symbol->string name)))))

;; ======================================================================
;;	parse-interface ...
;; ======================================================================
(define (parse-interface name body)

  (define (choose-language pkg lang)
    (let* ((lg   (if (pair? lang) (car lang) lang))
	   (info (assoc lg *scmpkg-languages*)))
      (unless info
	(error 'interface "Language '~S' is not managed" lg))
      ;; Set the language
      (set! (scmpkg-package-language pkg) lang)
      ;; Set the default suffix
      (unless (scmpkg-package-suffix pkg)
	(set! (scmpkg-package-suffix pkg) (key-get (cdr info) :suffix)))))

  (define (patch-package-export-list! pkg)
    (let ((exports '()))
      (for-each
          (lambda (x)
	    (if (symbol? x)
	      (%push! exports x)			     ;; export a variable
	      (match-case x
		 ((from ?mod . ?rest)			     ;; re-exportation
		  (%push! exports x))
		 ((macro (?name . ?rest))		     ;; export a macro
		  (%push! (scmpkg-package-macros pkg) name))
		 ((syntax ?args . ?-)			     ;; export a syntax
		  (%push! (scmpkg-package-syntaxes pkg) args))
		 (else
		  (%push! exports (car x))))))
	  (scmpkg-package-exports pkg))
      (set! (scmpkg-package-exports pkg) exports)))
  
  (define (patch-package! pkg)
    ;; Language & suffix
    (choose-language pkg (scmpkg-package-language pkg))
    ;; Source 
    (unless (scmpkg-package-source pkg)
      (set! (scmpkg-package-source pkg)
	(format "~a.~a" name (scmpkg-package-suffix pkg))))
    ;; Arrange the export list
    (patch-package-export-list! pkg)
    ;; Return the updated package
    pkg)
  
  (let ((pkg (%new-scmpkg-package name)))
    (for-each (lambda (clause)
		(match-case clause
		  ((version  ?version)
		   (set! (scmpkg-package-version pkg) version))
		  ((language . ?lg)
		   (set! (scmpkg-package-language pkg) lg))
		  ((source ?src)
		   (set! (scmpkg-package-source pkg) src))
		  ((suffix ?sfx)
		   (set! (scmpkg-package-suffix pkg) sfx))
		  ((import . ?imp)
		   (set! (scmpkg-package-imports pkg) imp))
		  ((export . ?exp)
		   (set! (scmpkg-package-exports pkg) exp))
		  (else
		   (unless (and (pair? clause)
				(memq (car clause) *ignored-interface-clauses*))
		     (error 'interface "Invalid clause ~S" clause)))))
	      body)
    (patch-package! pkg)))


;; ======================================================================
(export scmpkg-package-exports scmpkg-package-imports scmpkg-package-language
;;//	scmpkg-package-exceptions scmpkg-package-records
	scmpkg-package-source)
