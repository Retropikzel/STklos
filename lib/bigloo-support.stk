;;;;
;;;; b i g l o o -s u p p o r t. s t k      -- Bigloo compatibility file
;;;;
;;;; Copyright Â© 1997-2020 Erick Gallesio - I3S-CNRS/ESSI <eg@unice.fr>
;;;;
;;;; This program is free software; you can redistribute it and/or modify
;;;; it under the terms of the GNU General Public License as published by
;;;; the Free Software Foundation; either version 2 of the License, or
;;;; (at your option) any later version.
;;;;
;;;; This program is distributed in the hope that it will be useful,
;;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;;; GNU General Public License for more details.
;;;;
;;;; You should have received a copy of the GNU General Public License
;;;; along with this program; if not, write to the Free Software
;;;; Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307,
;;;; USA.
;;;;
;;;;
;;;;           Author: Erick Gallesio [eg@unice.fr]
;;;;    Creation date: 28-Oct-1997 11:09
;;;; Last file update: 19-Sep-2020 19:07 (eg)


;;;
;;; define-inline
;;;

(define-macro (define-inline args . body)
  `(define ,args ,@body))


;;;
;;; labels
;;;

(define-macro (labels bindings . body)
  (define (expand binding)
    (when (< (length binding) 3)
      (error 'labels "bad binding ~S" binding))
    `(,(car binding) (lambda ,(cadr binding) ,@(cddr binding))))

  `(letrec ,(map expand bindings)
     ,@body))

(define-macro (=fx a b ) `(= ,a ,b))
(define-macro (>=fx a b) `(>= ,a ,b))
(define-macro (<=fx a b) `(<= ,a ,b))
(define-macro (<fx a b)  `(<  ,a ,b))
(define-macro (>fx a b)  `(>  ,a ,b))

(define-macro (+fx a b) `(+ ,a ,b))
(define-macro (-fx a b) `(- ,a ,b))
(define-macro (*fx a b) `(* ,a ,b))
(define-macro (/fx a b) `(truncate (/ ,a ,b)))


;;;
;;; A macro for parsing the Bigloo MODULE directive
;;; This macro has been written for the MATCH-CASE and MATCH-LAMBDA
;;; primitives.
;;; Alas, the problem is that we don't have match-case here :-)
;;;

(define-macro (module name . clauses)
  (define (import-directive x)
    `(import ,@(map (lambda (x) (if (pair? x) (car x) x)) x)))

  (define (export-directive x)
    `(export ,@(map (lambda (x)
              (if (pair? x)
              ( (if (eq? (car x) 'inline) cadr car)  x)
              x))
            x)))

  `(begin
     (define-module ,name
       ,@(map (lambda (clause)
        (case (car clause)
          ((export) (export-directive (cdr clause)))
          ((import) (import-directive (cdr clause)))
          ((use)    '())
          (else     (bigloo:error "module" "Unknown clause"
                      (cons name clause)))))
          clauses)
       (define error bigloo:error))
     (select-module ,name)))

;;;
;;; Error
;;;
(define (bigloo:error proc msg obj)
  (error proc "~A ~S" msg obj))

(define-module __error)


(provide "bigloo-support")
