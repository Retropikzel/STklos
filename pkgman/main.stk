;;;;
;;;; main.stk   -- Stklos-Pkg main program
;;;;
;;;; Copyright Â© 2006-2023 Erick Gallesio <eg@stklos.net>
;;;;
;;;;
;;;; This program is free software; you can redistribute it and/or modify
;;;; it under the terms of the GNU General Public License as published by
;;;; the Free Software Foundation; either version 2 of the License, or
;;;; (at your option) any later version.
;;;;
;;;; This program is distributed in the hope that it will be useful,
;;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;;; GNU General Public License for more details.
;;;;
;;;; You should have received a copy of the GNU General Public License
;;;; along with this program; if not, write to the Free Software
;;;; Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307,
;;;; USA.
;;;;
;;;;           Author: Erick Gallesio [eg@essi.fr]
;;;;    Creation date: 22-Dec-2006 11:32 (eg)
;;;; Last file update: 29-Jan-2023 19:13 (eg)
;;;;

(import (srfi 35))

(include "../lib/http.stk")

(include "types.stk")
(include "params.stk")
(include "repository.stk")
(include "pkgball.stk")
(include "add.stk")
(include "rewrite.stk")
(include "lang.stk")
(include "tune.stk")
(include "extract.stk")
(include "copy.stk")
(include "install.stk")
(include "misc.stk")


;; ----------------------------------------------------------------------
;;      stklos-pkg-arguments ...
;; ----------------------------------------------------------------------
(define (stklos-pkg-arguments argv)
  (let ((actions '())
        (cp #f))

    (parse-arguments argv
       "Usage: stklos-pkg [options] [parameter ...]"

       "Actions"
       (("extract" :arg pkg :alternate "e" :help "Extract <pkg>. Don't install it")
        (set! actions (cons (list 'extract pkg) actions)))
       (("test" :arg pkg :alternate "t" :help "Test <pkg>.")
         (set! actions (cons (list 'test pkg) actions)))
       (("install" :arg pkg :alternate "i" :help "Extract, compile, Install <pkg>.")
         (set! actions (cons (list 'install pkg) actions)))
       (("uninstall" :arg pkg :help "un-install package <pkg>")
        (set! actions (cons (cons 'uninstall pkg) actions)))

       "Repository administration"
       (("sync" :alternate "s" :help "synchronize with remote server servers")
        (set! actions (cons 'sync actions)))
       (("add" :alternate "a" :arg sb
         :help "Add <sb> pkgball to the local repository")
        (set! actions (cons (list 'add sb) actions)))
       (("download" :arg pkg :help "download <pkg>")
         (set! actions (cons (list 'download pkg) actions)))
       (("fill-cache" :help "fill cache with available distant packages")
        (set! actions (cons 'fill-cache actions)))
       (("clear-cache" :help "delete packages present in cache")
        (set! actions (cons 'clear-cache actions)))
       (("reset" :help "reset stklos-pkg repository. USE WITH CAUTION")
        (set! actions (cons 'delete-repo actions)))
       (("build-sync-file" :arg dir :help "Build a synchronization file from <dir>")
        (set! actions (cons (list 'build-sync-file dir) actions)))

       "Informations"
       (("list" :alternate "l" :help "list available packages")
        (set! actions (cons 'list actions)))
       (("depends" :arg pkg :help "Show all the dependencies of <pkg>")
        (set! actions (cons (list 'package-deps pkg) actions)))
       (("installed" :help "Show installed packages")
        (set! actions (cons 'installed actions)))


       "Misc"
       (("conf-dir" :arg dir :alternate "D"
         :help "Use <dir> as stklos main configuration directory")
        (stklos-pkg-directory (make-path (expand-file-name dir) "pkg")))
       (("directory" :arg dir :alternate "C"
         :help "Change to directory <dir> (extract/download)")
        (stklos-pkg-extract-dir dir))
       (("verbose" :alternate "v" :help "be verbose (can be cumulated)")
        (stklos-pkg-verbosity (+ (stklos-pkg-verbosity) 1)))
       (("system-wide" :alternate "S" :help "do a system wide (de)installation")
        (stklos-pkg-swide #t))
       (("version" :alternate "V" :help "print the version and exit")
        (printf "stklos-pkg shipped with STklos (version ~A)\n" (version))
        (exit 0))
       (("help" :alternate "h" :help "display this help")
        (arg-usage (current-output-port))
        (exit 0))
       (("options" :help "display program options")
        (arg-usage (current-output-port) #t)
        (exit 0))
       (("cp" :help "INTERNAL USE ONLY. Do not use this option")
        (set! cp #t))
       (else
        (when cp
          (set! actions (cons (cons 'cp other-arguments) actions)))))

    (if (null? actions)
        '(list)
        (reverse actions))))


;; ----------------------------------------------------------------------
;;      load-user-rc ...
;; ----------------------------------------------------------------------
(define (load-user-rc)
  (let ((rc (%stklos-conf-file "pkgrc")))
    (when (and (file-exists? rc)
               (file-is-readable? rc))
      (with-handler (lambda (c)
                      (eprintf "**** Error while loading RC file ~S\n" rc)
                      (raise c))
        (load rc)))))

;; ----------------------------------------------------------------------
;;      global-handler ...
;; ----------------------------------------------------------------------
(declare-new-error error-pkg)

;;//(define (global-handler c)
;;//  (if  (and (condition? c) (condition-has-type? c &error-message))
;;//    (let ((who (condition-ref c 'location))
;;//          (msg (condition-ref c 'message)))
;;//      (unless (condition-has-type? c &error-pkg)
;;//        (describe c))
;;//      (format (current-error-port)
;;//              "**** ERROR: ~a~a\n"
;;//              msg
;;//              (if who (format " (in procedure ~a)" who) "")))
;;//    (begin
;;//      (format (current-error-port) "UNKNOWN error ~S!!!\n" c)
;;//      (describe c)))
;;//  (exit 70))

(define (global-handler c)
  (when (condition? c)
      (cond
        ((condition-has-type? c &error-message)
             (let ((who (condition-ref c 'location))
                   (msg (condition-ref c 'message)))
               (unless (condition-has-type? c &error-pkg)
                 (describe c))
               (format (current-error-port)
                       "**** ERROR: ~a~a\n"
                       msg
                       (if who (format " (in procedure ~a)" who) ""))))
        ((condition-has-type? c &exit-r7rs)
            (let ((retcode (condition-ref c 'retcode)))
              (%pre-exit retcode)
              (emergency-exit retcode)))
        (else
         (format (current-error-port) "UNKNOWN condition ~S!!!\n" c)
         (describe c)))
      (emergency-exit 70))
  (format (current-error-port) "UNKNOWN error ~S!!!\n" c)
  (describe c)
  (emergency-exit 70))

;; ----------------------------------------------------------------------
;;      main ...
;; ----------------------------------------------------------------------
(define (main argv)
  (with-handler global-handler
    ;; Eventually load user rc file
    (load-user-rc)
    ;; Ensure that files are correctly set
    (ensure-repository-hierarchy)
    ;; load the servers informations
    (load-repository-descriptions)
    ;; Parse the program arguments
    (let loop ((actions (stklos-pkg-arguments argv)))
      (unless (null? actions)
        (case ((if (pair? (car actions)) caar car) actions)
          ((list)
             (list-repository-packages))
          ((sync)
             (synchronize-servers))
          ((delete-repo)
             (rm-rf (stklos-pkg-cache-directory))
             (rm-rf (stklos-pkg-servers-directory))
             (exit 0))
          ((fill-cache)
             (fill-cache))
          ((clear-cache)
             (clear-cache))
          ((extract)
             (find-and-extract-package (cadar actions)
                                       (stklos-pkg-extract-dir)))
          ((test)
             (exit (find-extract-and-test-package (cadar actions)
                                                  (create-temp-directory))))
          ((install)
             (exit (find-extract-and-install-package (cadar actions)
                                                     (create-temp-directory))))
          ((download)
             (download-package-only (cadar actions))
             (exit 0))

          ((package-deps)
           (for-each (lambda (x) (printf "~a\n" x))
                     (package-deps* (cadar actions))))
          ((add)
           (local-description-add! (cadar actions))
           (exit 0))

          ((cp)
           (do-copy (cdar actions)))

          ((installed)
           (show-installed-packages))

          ((uninstall)
           (uninstall-package (cdar actions)))

          ((build-sync-file)
           (build-user-sync-file (cadar actions))
           (exit 0))

          (else (error-pkg "bad command ~S" (car actions))))
        (loop (cdr actions))))))
