;;;;
;;;; extract.stk        -- Implementation of stklos-pkg extract option
;;;;
;;;; Copyright Â© 2007-2021 Erick Gallesio - I3S-CNRS/ESSI <eg@essi.fr>
;;;;
;;;;
;;;; This program is free software; you can redistribute it and/or modify
;;;; it under the terms of the GNU General Public License as published by
;;;; the Free Software Foundation; either version 2 of the License, or
;;;; (at your option) any later version.
;;;;
;;;; This program is distributed in the hope that it will be useful,
;;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;;; GNU General Public License for more details.
;;;;
;;;; You should have received a copy of the GNU General Public License
;;;; along with this program; if not, write to the Free Software
;;;; Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307,
;;;; USA.
;;;;
;;;;           Author: Erick Gallesio [eg@essi.fr]
;;;;    Creation date: 15-Jan-2007 12:10 (eg)
;;;; Last file update: 30-Mar-2021 14:20 (eg)
;;;;


;; ----------------------------------------------------------------------
;;      write-extract-makefile ...
;; ----------------------------------------------------------------------
(define (write-extract-makefile package pkg-vers targets dir)

  (define objs '())

  (define (flat-string lst)
    (with-output-to-string
      (lambda () (for-each (lambda (x) (printf "\t~a \\\n" x)) lst))))

  (define (build-target target)
    (let* ((tunedir  (make-path dir target "stklos"))
           (tunemake (make-path tunedir "Makefile"))
           (tuneconf (make-path tunedir "configure")))
      (cond
        ((file-exists? tunemake)
         ;; We have a Makefile in a tuning
          (set! objs (cons (format "~a.ostk" target) objs))
          (printf "~a.ostk:\n" target)
          (printf "\t(cd ~a; $(MAKE))\n\n" tunedir))
        ((file-exists? tuneconf)
           ;; We have a configure in a tuning
           (set! objs (cons (format "~a.$(SO)" target) objs))
           (printf "~a.$(SO):\n" target)
           (printf "\t(cd ~a; ./configure; $(MAKE))\n\n" tunedir))
        (else
           ;; A simple package
           (set! objs (cons (format "~a.ostk" target) objs))
           (printf "~a.ostk: ~a/~a.spi\n" target target target)
           (printf "\t(cd ~a; $(SCC) $(SFLAGS) -L .. -o ../~a.ostk ~a.spi)\n\n"
                   target target target)))))

  (define (build-test-target)
    (let ((spi (format "~a-test.spi" package)))
      (printf "test:  $(OBJS)\n")
      (if (file-exists? (make-path dir package "test" spi))
        (begin
          (printf "\t(cd ~a; $(SCC) $(SFLAGS) -L ../.. -o ../../~a.ostk ~a)\n"
                  (make-path package "test")
                  (format "~a-test" package)
                  spi)
          (printf "\techo 'Running test'\n")
          (printf "\tstklos -c -l ~a -e '(begin (import ~a-test) (run '\\''()))'\n\n"
                  (format "~a-test.ostk" package)
                  package))
        (printf "\t@echo '**** No test provided with package ~A'\n" package))))

  (define (build-install-target targets system-wide?)
    (let ((prefix (if system-wide? "system-" ""))
          (option (if system-wide? "-S" "")))
      (printf "~ainstall: $(OBJS)\n" prefix)
      (for-each (lambda (x)
                  (let* ((tunedir  (make-path dir x "stklos"))
                         (tuneconf (make-path tunedir "configure"))
                         (tunemake (make-path tunedir "Makefile"))
                         (docdir   (make-path dir x "doc"))
                         (obj      (format "~a.~a" x
                                           (if (file-exists? tuneconf)
                                               "$(SO)"
                                               "ostk")))
                         (docs     (if (file-is-directory? docdir)
                                       (directory-files docdir #t)
                                       '())))
                    ;; if we have a configure or Makefile go in dir
                    (when (or (file-exists? tuneconf)
                              (file-exists? tunemake))
                      (printf "\t(cd ~a; $(MAKE) ~ainstall)\n" tunedir prefix))
                    ;; installing the object file
                    (printf "\tstklos-pkg ~a --cp ~a ~a lib 0755 && \\\n"
                            option x obj)
                    ;; installing the doc files
                    (for-each
                     (lambda (d)
                       (printf "\tstklos-pkg ~a --cp ~a ~a doc 0744 && \\\n"
                               option x (make-path x "doc" d)))
                     docs)))
                targets)
      (printf "\techo '~ainstall done.'\n\n" prefix)))

  ;;;
  ;;; write-extract-file starts here
  ;;;
  (let* ((tmpl (make-path (%library-prefix) "share" "stklos" (version) "etc"
                          "Makefile-scmpkg.tmpl"))
         (in   (open-file tmpl "r")))
    (unless in
      (error-pkg 'write-extract-makefile "cannot open template Makefile (~s)" tmpl))

    (let ((make (port->string in))
          (tmp  (with-output-to-string
                  (lambda ()
                    (for-each build-target targets)
                    (build-target package)))))
      (close-port in)
      (with-output-to-file (make-path dir "Makefile")
        (lambda ()
          ;; Header
          (display
           (sed make
                `(("@OBJS@"    ,(flat-string (reverse objs)))
                  ("@MAKE@"    ,(make-command))
                  ("@SO@"      ,(exec "stklos-config --shared-suffix"))
                  ("@SCOMP@"   ,(exec "stklos-config --compile"))
                  ("@SLINK@"   ,(exec "stklos-config --link")))))
          (newline)
          (display tmp)
          (build-test-target)
          (let ((all (append! targets (list package))))
            (build-install-target all #f)
            (build-install-target all #t))
          (display "\n# End of Makefile\n")
          (flush-output-port))))))


;; ----------------------------------------------------------------------
;;      find-and-extract-package ...
;; ----------------------------------------------------------------------
(define (find-and-extract-package package dir)

  (define (extract-package pkg dir)
    (let ((pkgball (package-path pkg))
          (tuning  (package-tuning pkg)))
      ;; create directory
      (unless (file-exists? dir)
        (make-directories dir))
      ;; extract package
      (unless (file-exists? pkgball)
        (die (format "cannot find pkgball in cache ~s" (basename pkgball))))
      (untar pkgball dir)
      ;; Eventually rewrite package with its specialized preprocessor
      (rewrite-package pkg dir)
      ;; if the package has a tuning extract it too.
      (when tuning
        (let ((tuneball (tuning-path tuning)))
          (unless (file-exists? pkgball)
            (die (format "cannot find tuning pkgball in cache ~s"
                         (basename tuneball))))
          (untar tuneball dir)
          ;; Tune the original package
          (tune-package pkg dir)))))

  (let ((pkg  (download-package package))
        (deps (package-deps* package)))
    ;; Download all package dependencies
    (for-each download-package deps)
    ;; extract all its dependencies
    (for-each (lambda (x) (extract-package (find-package x) dir)) deps)
    ;; extract the package itself and (eventually) its tuning
    (extract-package pkg dir)
    ;; Create the Makefile able to build the package
    (write-extract-makefile package (package-version pkg) deps dir)))

;; ----------------------------------------------------------------------
;;      find-extract-and-test-package ...
;; ----------------------------------------------------------------------
(define (find-extract-and-test-package package tmpdir)
  (dynamic-wind
      list
      (lambda ()
        (find-and-extract-package package tmpdir)
        (when (> (stklos-pkg-verbosity) 0)
          (eprintf "Start testing package ~S in directory ~S\n" package tmpdir))
        (test-package package tmpdir))
      (lambda()
        (when (> (stklos-pkg-verbosity) 0)
          (eprintf "Deleting build and test directory ~S\n" tmpdir))
        (rm-rf tmpdir))))


;; ----------------------------------------------------------------------
;;      find-extract-and-install-package ...
;; ----------------------------------------------------------------------
(define (find-extract-and-install-package package tmpdir)
  (dynamic-wind
      list
      (lambda ()
        (when (> (stklos-pkg-verbosity) 0)
          (eprintf "Start installing package ~S in directory ~S\n" package tmpdir))
        (find-and-extract-package package tmpdir)
        (install-package package tmpdir))
      (lambda()
        (when (> (stklos-pkg-verbosity) 0)
          (eprintf "Deleting build directory ~S\n" tmpdir))
        (rm-rf tmpdir))))
