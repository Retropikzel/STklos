;; ======================================================================
;;
;;                      STklos Reference Manual
;;
;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation; either version 2 of the License, or
;; (at your option) any later version.
;;
;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.
;;
;; You should have received a copy of the GNU General Public License
;; along with this program; if not, write to the Free Software
;; Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307,
;; USA.
;;           Author: Erick Gallesio [eg@unice.fr]
;;    Creation date: 26-Nov-2000 18:19 (eg)
;; Last file update: 26-Apr-2021 11:19 (eg)
;;
;; ======================================================================


(define (srfi-subsection n . l)
  (let ((infos (find-srfi n)))
    (unless infos
      (error "srfi-subsection: SRFI ~S not in database!!" n))
    (let ((name (format "SRFI-~A" n)))
      (list
       (index name)
       (apply subsection :number #f :title
              [,(string-downcase name) -- ,(%srfi-title infos)] l)))))

(define-macro (gen-srfi-documentation n :optional rest)
  `(srfi-subsection ,n
      (p [,(quick-link-srfi ,n) is fully supported. ]
         ,(if rest rest ""))))



;; ======================================================================

(index "SRFI")
(chapter :title "SRFIs"

(p [The ,(emph "Scheme Request for Implementation")
(,(ref :url "http://srfi.schemers.org" :text "SRFI")) process
grew out of the Scheme Workshop held in Baltimore, MD, on
September 26, 1998, where the attendees considered a number of
proposals for standardized feature sets for inclusion in Scheme
implementations. Many of the proposals received overwhelming
support in a series of straw votes. Along with this there was
concern that the next Revised Report would not be produced for
several years and this would prevent the timely implementation of
standardized approaches to several important problems and needs
in the Scheme community.])

(p [Only the implemented SRFIs are (briefly) presented here. For further
information on each SRFI, please look at the official
,(ref :url "http://srfi.schemers.org" :text "SRFI site").])


;; ============================================================
(section :title "Supported SRFIs"
(p [,(stklos) supports ,(bold (length *srfi-database*)) finalized SRFIS.  Some of
these SRFIS are ,(emph "embedded") and some are ,(emph "external").  An
,(emph "embedded") SRFI can be directly used without any particular action,
whereas an ,(emph "external") needs to be loaded.])

(p [The following SRFIS are implemented:])
(itemize
 (map (lambda (x)
        (let ((nb (car x)))
          (item [ ,(srfi-description nb) ,(index (format "SRFI-~a" nb))])))
      *srfi-database*)))



;; ============================================================
(section
 :title "Using a SRFI"
 (p [Using a particular SRFI can be done with the special form
,(code "cond-expand") defined in ,(quick-link-srfi 0) which is fully supported
by ,(stklos). This form accepts features identifiers which are of the
form ,(emph "srfi-n") where ,(emph "n") represents the number of the SRFI
supported by the implementation (for instance ,(emph "srfi-1") or
,(emph "srfi-30")).])

 (p [For instance, to use ,(emph "srfi-n"), you can use]
    (fontified-code [
(cond-expand
 (srfi-n))]))

(p [This forms does nothing if ,(emph "srfi-n") is an embedded SRFI and
ensures that all the files needed by this SRFI will be properly loaded if it
is an external SRFI.])

(p [,(stklos) also offers the primitive ,(bold (ref :mark "require-feature"))
which ensures (eventually) the loading of files needed to use a given SRFI. This
primitive accepts several forms to ensure that the SRFI can be used.
For instance, to use SRFI-1 the following forms are possible:
,(fontified-code [
(require-feature 'srfi-1)
(require-feature "srfi-1")
(require-feature 1)
(require-feature 'lists)      ;; Since this feature name is an alias for SRFI-1
])])

(p [The list of the aliases defined for the supported SRFIs is given in figure
,(ref :figure "Feature identifiers")])

;; --------------------------------------------------
(subsection
 :title "Embedded SRFIs"

 (p [As said before, a embedded SRFI can be used directly without loading a
support file. (Note that using ,(bold (ref :mark "require-feature")) works too
and permits to ignore if the SRFI is embedded).])

 (p [,(bold "List of embedded SRFIs:")
    ,(map (lambda (x)
            (let* ((nb (car x))
                   (info (find-srfi nb)))
            (if (not (%srfi-file info))
                (code (format " srfi-~a" nb))
                "")))
          *srfi-database*)
   .]))

;; --------------------------------------------------
(subsection
 :title "External SRFIs"

 (p [An external SRFI needs to load at least one external file. This can be
done with ,(bold (ref :mark "require")) or ,(bold (ref
:mark "require-feature")). As with embedded SRFIS, using ,(bold (ref
:mark "require-feature")) permits to ignore if the SRFI is external.])

 (p [,(bold "List of external SRFIs:")
   ,(map (lambda (x)
            (let* ((nb (car x))
                   (info (find-srfi nb)))
            (if (%srfi-file info)
                (code (format " srfi-~a" nb))
                ""))) *srfi-database*) .]) )

(subsection
 :title "SRFI features"

(p [For some SRFIs, ,(stklos) accepts that uses them with a name. This names
are given the table ,(ref :figure "Feature identifiers").])

(figure :legend "Feature identifiers"
   (center
    (table  :rules 'cols :frame 'border :width 60.
       (tr :bg "#eeeeee" (th "Symbol") (th "require SRFI(s)"))
       ;;
       ;; The SRFIS
       ;;
       (map (lambda (x)
              (let* ((nb    (car x))
                     (info  (find-srfi nb))
                     (names (%srfi-names info))
                     (file  (%srfi-file info)))
                (if (> (length names) 1)
                    (tr (tdl (symbol->string (cadr names)))
                        (tdl (symbol->string (car names))))
                    "")))
            *srfi-database*)
       ;;
       ;; The aliases
       ;;
       (map (lambda (x)
              (tr (tdl (symbol->string (car x)))
                  (tdl (with-output-to-string
                         (lambda ()
                           (for-each (lambda (f)
                                       (display f)
                                       (display " "))
                                     (cdr x)))))))
            *srfi-shortcuts*)))))

;; End section
)

;; ======================================================================
;;
;; Misc information
;;
;; ======================================================================


(section :title "Misc. Information"
(p [Previous section described the general way to use the SRFIS implemented in
             ,(stklos).  This section concentrates on information not given above.])

;; ----------------------------------------------------------------------
;; SRFI-0
;; ----------------------------------------------------------------------
(srfi-subsection 0

(p [,(quick-link-srfi 0) defines the ,(code "cond-expand")
special form. It is fully supported by ,(stklos). ,(stklos)
defines several features identifiers which are of the form
,(emph "srfi-n") where ,(emph "n") represents the number of the
SRFI supported by the implementation (for instance
,(emph "srfi-1") or ,(emph "srfi-30")).])

(p [,(stklos) ,(code "cond-expand") accepts also some
feature identifiers which are the same that the ones
defined in figure ,(ref :figure "Feature identifiers")])

(p [Furthermore, the feature identifier ,(emph "stklos") and ,(emph "STklos")
are defined for applications which need to know on which Scheme implementation
they are running on.]))

;; ----------------------------------------------------------------------
;; SRFI 10 -- #, External Form
;; ----------------------------------------------------------------------
(srfi-subsection 10

(index "define-reader-ctor")
(p [,(quick-link-srfi 10) is fully supported. This SRFI extends the
STklos reader with the ,(q (code "#,")) notation which is fully described in
this document (see ,(ref :mark "define-reader-ctor")).]))

;; ----------------------------------------------------------------------
;; SRFI 16 -- Syntax for procedures of variable arity
;; ----------------------------------------------------------------------
(index "procedure" :note "variable arity")
(index "case-lambda")
(gen-srfi-documentation 16 [Note ,(code "case-lambda") is now defined in ,(rseven).])

;; ----------------------------------------------------------------------
;; SRFI 17 -- Generalized set!
;; ----------------------------------------------------------------------
(index "assignment" :note "generalized")
(index "set!" :note "generalized")
(index "setter")

(gen-srfi-documentation 17 [See the documentation of procedures ,(code "set!")
and ,(code "setter"). However, requiring explicitly ,(code "srfi-17") permits
to define the setters for the (numerous) cXXXXr list procedures.])

;; ----------------------------------------------------------------------
;; SRFI 22 -- Unix Scheme Scripts
;; ----------------------------------------------------------------------
(index "script files")
(srfi-subsection 22

(p [,(quick-link-srfi 22) describes basic prerequisites for
running Scheme programs as Unix scripts in a uniform
way. Specifically, it describes: ,(itemize
    (item [the syntax of Unix scripts written in Scheme,])
    (item [a uniform convention for calling the Scheme script interpreter,
             and])
    (item [a method for accessing the Unix command line arguments from
within the Scheme script.]))])

(p [,(srfi 22) recommends to invoke the Scheme script interpreter from the
script via a /usr/bin/env trampoline, like this:
,(raw-code "#!/usr/bin/env <executable>")
where ,(code "<executable>") can recover several specified names.
,(stklos) uses only the name ,(code "stklos-script") for
,(code "<executable>").])


(p [Here is an example of the classical ,(code "echo")
command (without option) in Scheme:])

(fontified-code [
#!/usr/bin/env stklos-script

(define (main arguments)
  (for-each (lambda (x) (display x) (display #\space))
            (cdr arguments))
  (newline)
  0)
]))

;; ----------------------------------------------------------------------
;; SRFI 23 -- Error reporting mecanism
;; ----------------------------------------------------------------------
(index "error")
(gen-srfi-documentation 23 [ Note that the ,(stklos) ,(bold (ref :mark "error")) is more
general than the one defined in SRFI-23.])

;; ----------------------------------------------------------------------
;; SRFI 25 -- Arrays
;; ----------------------------------------------------------------------
(index "arrays")

(gen-srfi-documentation 25 [

  ,(stklos) implements the arrays as defined in the SRFI document. All the forms
defined in the SRFI are implemented in ,(stklos), but some other
functions, not present in the SRFI, are documented here.

,(linebreak)
,(insertdoc 'shape?)
,(insertdoc 'shared-array?)
,(insertdoc 'shape-for-each)

,(insertdoc 'share-nths)
,(insertdoc 'share-column)
,(insertdoc 'share-row)
,(insertdoc 'share-array/origin)

,(insertdoc 'array-copy+share)
,(insertdoc 'array-size)
,(insertdoc 'array-shape)
,(insertdoc 'array->list)
,(insertdoc 'array->vector)
,(insertdoc 'array-length)
,(insertdoc 'array-map)
,(insertdoc 'array-map!)
,(insertdoc 'array-append)
,(insertdoc 'array-share-count)
,(insertdoc 'array-copy)
,(insertdoc 'array-for-each-index)
,(insertdoc 'tabulate-array)
,(insertdoc 'array-retabulate!)
,(insertdoc 'transpose)
])



;; ----------------------------------------------------------------------
;; SRFI 27 --  Sources of Random Bits
;; ----------------------------------------------------------------------
(index "random-integer")
(index "random-real")
(gen-srfi-documentation 27 [Using primitives ,(ref :mark "random-integer"
:text "random-integer") or ,(ref :mark "random-real" :text "random-real")
automatically loadthis SRFI.])

;; ----------------------------------------------------------------------
;; SRFI 28 -- Basic Format Strings
;; ----------------------------------------------------------------------
(index "format")
(gen-srfi-documentation 28 [Note that ,(stklos) ,(code "format") is more general
than the one defined this SRFI.])

;; ----------------------------------------------------------------------
;; SRFI 35 & 36 -- Conditions & I/O conditions
;; ----------------------------------------------------------------------
(gen-srfi-documentation 35 [
See section ,(ref :section "Predefined Conditions") for the predefined conditions
and when it is required to load this file.])

(gen-srfi-documentation 36 [
See section ,(ref :section "Predefined Conditions") for the predefined conditions
and when it is required to load this file.])

;; ----------------------------------------------------------------------
;; SRFI 55 -- Require-extension
;; ----------------------------------------------------------------------
(index "require-extension")
(gen-srfi-documentation 55 [Furthermore, ,(stklos) also accepts the symbols
defined in figure ,(ref :figure "Feature identifiers") in a
,(bold (ref :mark "require-extension")) clause.])

;; ----------------------------------------------------------------------
;; SRFI 69 -- Basic Hash Tables
;; ----------------------------------------------------------------------
(gen-srfi-documentation 69

[Note that the default comparison function in ,(stklos) is ,(code "eq?") whereas it
is ,(code "equal?") for the SRFI. Furthermore the hash functions
defined in the SRFI are not defined by default in ,(stklos). To have
a fully compliant SRFI-69 behaviour, you need use a ,(bold (ref :mark "require-feature"))
in your code.])

;; SRFI 88 -- Keyword objects
(gen-srfi-documentation  88

[The only difference between the keywords defined in the SRFI document and the
,(stklos) keywords is on the zero-length keyword: in ,(stklos), the keyword
,(tt ":") is equivalent to the keyword ,(tt "||:"), whereas the srfi considers
that ,(tt ":") is not a keyword but a symbol.])

;; SRFI 138 -- Compiling Scheme programs to executables
(gen-srfi-documentation 138

[ The ,(tt "stklos-compile") program conforms to SRFI 138, accepting all
the required command line options. The ,(tt "-D x") flag will define a feature
(,tt "x") for use with cond-expand in the compiled code only. It will not
include (,tt "x") in the features list of the runtime.])

;; SRFI 145 -- Assumptions
(gen-srfi-documentation 145 [See the ,(ref :mark "assume" :text "assume")
special form])

;; SRFI 169 -- Underscores in numbers
(gen-srfi-documentation 169 [See ,(ref :mark "accept-srfi-169-numbers"
                              :text "accept-srfi-169-numbers") to eventually
forbid the usage of underscores in numbers.])

;; End of Misc. section
)


;; End of chapter
)

;; Local Variables:
;; mode: scheme
;; End:
