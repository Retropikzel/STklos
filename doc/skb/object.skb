;; ======================================================================
;;
;; 			STklos Reference Manual
;;
;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation; either version 2 of the License, or
;; (at your option) any later version.
;;
;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.
;;
;; You should have received a copy of the GNU General Public License
;; along with this program; if not, write to the Free Software
;; Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307,
;; USA.
;;           Author: Erick Gallesio [eg@unice.fr]
;;    Creation date: 26-Nov-2000 18:19 (eg)
;; Last file update:  4-Aug-2021 15:09 (eg)
;;
;; ======================================================================

(define (max-line)
  (case *engine-type*
    ((html) "100%")
    ((tex)  "broad")
    (else   (error 'max-line "In object.skb: no length defined"))))


(chapter :title "STklos Object System"

;;;
;;; Introduction
;;;
(section :title "Introduction" :ident "obj:introduction"

   (p [The aim of this chapter is to present ,(stklos) object
system.  Briefly stated, ,(stklos) gives the  programmer
an extensive object system with meta-classes, multiple
inheritance, generic functions and multi-methods.  Furthermore,
its implementation relies on a Meta Object Protocol
(MOP) ,(ref :bib "AMOP"), in the spirit of the one defined for
CLOS ,(ref :bib "CLtL2").])

   (p [,(STklos) implementation is derived from the version 1.3
of ,(emph "Tiny CLOS"), a pure and clean CLOS-like MOP
implementation in Scheme written by Gregor Kickzales
,(ref :bib "Tiny-Clos"). However, Tiny CLOS implementation was
designed as a pedagogical tool and consequently, completeness and
efficiency were not the author concern for it.  ,(stklos)
extends the Tiny CLOS model to be efficient and as close as
possible to CLOS, the Common Lisp Object System ,(ref :bib "CLtL2").
Some features of ,(stklos) are also issued from
Dylan ,(ref :bib "Dylan") or SOS ,(ref :bib "SOS").])

(p [This chapter is divided in three parts, which have a
quite different audience in mind:])

(itemize
   (item [ The first part presents the ,(stklos) object system rather
informally; it is intended to be a tutorial of the language and is
for people who want to have an idea of the ,(emph "look and feel") of
,(stklos).])

   (item [The second part describes the ,(stklos) object system at
  the ,(emph "external") level (i.e.  without requiring the use of the
  Meta Object Protocol).])

   (item [The third and last part describes the ,(stklos) Meta
  Object Protocol.  It is intended for people whio want to play with
  meta programming.])))


;;;; ======================================================================
;;;;
;;;; Tutorial
;;;;
;;;; ======================================================================

(section :title "Object System Tutorial"

(p [The ,(stklos) object system relies on classes like most of
the current OO languages.  Furthermore, ,(stklos) provides
meta-classes, multiple inheritance, generic functions and
multi-methods as in CLOS, the Common Lisp Object System
,(ref :bib "CLtL2") or Dylan ,(ref :bib "Dylan").  This chapter
presents ,(stklos) in a rather informal manner.  Its intent is to
give the reader an idea of the ,(q (emph"look and feel")) of
,(stklos) programming.  However, we suppose here that the reader
has some basic notions of OO programming, and is familiar with
terms such as ,(emph "classes, instances") or ,(emph "methods.")])

;;;
;;; Class definition and instantiation
;;;
(subsection :title "Class definition and instantiation"
(index "class")
(index "class" :note "definition")
(index "define-class")

(subsubsection :title "Class definition"

   (p [A new class is defined with the ,(code "define-class") form.
The syntax of ,(code "define-class") is close to CLOS ,(code "defclass"):])

(fontified-code [
(define-class class (superclass,(sub "1") superclass,(sub "2") ...)
  (slot-description,(sub "1")
   slot-description,(sub "2")
   ...)
  metaclass option)
])

   (p [The ,(emph "metaclass option") will not be discussed here.
The ,(emph "superclass")es list specifies the super classes of
,(emph "class")
(see ,(ref :mark "inheritance") for details).])

   (index "class" :note "slot description")
   (p [A ,(emph "slot description") gives the name of a slot and,
eventually, some ,(q "properties") of this slot (such as its
initial value, the function which permit to access its value,
...). Slot descriptions will be discussed in
,(ref :mark "slot-definition").])

    (p [As an example, consider now that we want to define a
point as an object. This can be done with the following class
definition:])

    (fontified-code [
(define-class  <point> ()
  (x y))
])

   (p [This definition binds the symbol ,(code "<point>") to a
new class whose instances contain two slots. These slots are
called ,(code "x") an ,(code "y") and we suppose here that they
contain the coordinates of a 2D point.])

   (p [Let us define now a circle, as a 2D point and a radius:])

   (fontified-code [
(define-class <circle> (<point>)
  (radius))
])

   (p [As we can see here, the class ,(code "<circle>") is
constructed by inheriting from the class ,(code "<point>") and
adding a new slot (the ,(code "radius") slot).]))



(subsubsection :title "Instance creation and slot access"
(index "instance")
(index "make")
   (p [Creation of an instance of a previously defined class can
be done with the ,(code "make") procedure. This procedure takes
one mandatory parameter which is the class of the instance which
must be created and a list of optional arguments. Optional
arguments are generally used to initialize some slots of the
newly created instance. For instance, the following form:])

(fontified-code [
(define c (make <circle>))
])

(p [creates a new ,(code "<circle>") object and binds it to the
,(code "c") Scheme variable.])

(index "slot-ref")
(index "slot-set!")
(index "slot" :note "accessing")
(p [Accessing the slots of the newly created circle can be done
with the ,(code "slot-ref") and the ,(code "slot-set!")
primitives. The ,(code "slot-set!") primitive permits to set the
value of an object slot and ,(code "slot-ref") permits to get its
value.])

(fontified-code [
(slot-set! c 'x 10)
(slot-set! c 'y 3)
(slot-ref c 'x) ,(symbol-arrow) 10
(slot-ref c 'y) ,(symbol-arrow) 3
])

(p [Using the ,(code "describe") function is a simple way
to see all the slots of an object at one time: this function
prints all the slots of an object on the standard output. For
instance, the expression:])

(fontified-code [
(describe c)
])

(p [prints the following informations on the standard output:])

(raw-code [
#\[<circle> 81aa1f8\] is an an instance of class <circle>.
Slots are:
     radius = #\[unbound\]
     x = 10
     y = 3
]))

(subsubsection :title "Slot Definition"
   (mark "slot-definition")
   (index "slot" :note "definition")
   (p [When specifying a slot, a set of options can be given to
the system.  Each option is specified with a keyword. For
instance, ])

(itemize
   (item
      (index "slot" :note "initialization")
      [,(bold ":init-form") can be used to supply a default
value for the slot.])
   (item
      [,(bold ":init-keyword") can be used to specify the
keyword used for initializing a slot.])
   (item
      (index "slot" :note "getter")
      [,(bold ":getter") can be used to define the name of the
slot getter])
   (item
      (index "slot" :note "setter")
      [,(bold ":setter") can be used to define the name of the
slot setter])
   (item
      (index "slot" :note "accessor")
      [,(bold ":accessor") can be used to define the name of the
slot accessor (see below)])))


   (p [To illustrate slot description, we redefine here the
,(code "<point>") class seen before. A new definition of this
class could be:])
   (fontified-code [
(define-class <point> ()
  ((x :init-form 0 :getter get-x :setter set-x! :init-keyword :x)
   (y :init-form 0 :getter get-y :setter set-y! :init-keyword :y)))
])

(p [With this definition, the ,(code "x") and ,(code "y") slots are
set to 0 by default.  Value of a slot can also be specified by
calling ,(code "make") with the ,(code ":x") and ,(code ":y")
keywords.  Furthermore, the generic functions ,(code "get-x") and
,(code "set-x!")
(resp.  ,(code "get-y") and ,(code "set-y!"))  are automatically
defined by the system to read and write the ,(code "x") (resp.
,(code "y")) slot.])

   (fontified-code [
(define p1 (make <point> :x 1 :y 2))
(get-x p1)        ,(symbol-arrow) 1
(set-x! p1  12)
(get-x p1)        ,(symbol-arrow) 2

(define p2 (make <point> :x 2))
(get-x p2)         ,(symbol-arrow) 2
(get-y p2)        ,(symbol-arrow) 0
])

   (index "set!")
   (p [Accessors provide an uniform access for reading and writing an object slot.
Writing a slot is done with an extended form of ,(code "set!")  which is
close to the Common Lisp ,(code "setf") macro.  A slot accessor can be
defined with the ,(code ":accessor") option in the slot
description.  Hereafter, is another definition of our
,(code "<point>") class, using an accessor:])

   (fontified-code [
(define-class <point> ()
  ((x :init-form 0 :accessor x-of :init-keyword :x)
   (y :init-form 0 :accessor y-of :init-keyword :y)))
])


   (p [Using this class definition, reading the x coordinate of the
,(code "p") point can be done with:])

   (fontified-code [(x-of p)])

   (p [and setting it to 100 can be done using the extended ,(code "set!")])

   (fontified-code [(set! (x-of p) 100)])

   (p [,(bold "Note:") ,(stklos) also define ,(code "slot-set!") as the setter
function of ,(code "slot-ref") (see ,(ref :mark "setter" :text "setter")).
As a consequence, we have:])

   (fontified-code [
(set! (slot-ref p 'y) 100)
(slot-ref p 'y)       ,(symbol-arrow) 100
])

(subsubsection :title "Virtual Slots"

(index "slot" :note "virtual")
(index "virtual slot")

(p [Suppose that we need a slot named ,(code "area") in circle
objects which contain the area of the circle. One way to do this
would be to add the new slot to the class definition and have an
initialisation form for this slot which takes into account the
radius of the circle. The problem with this approach is that if
the ,(code "radius") slot is changed, we need to change
,(code "area") (and vice-versa). This is something which is hard
to manage and if we don't care, it is easy to have a ,(code "area")
and ,(code "radius") in an instance which are ,(q "un-synchronized").
The virtual slot mechanism avoid this problem.])

(p [A virtual slot is a special slot whose value is calculated
rather than stored in an object.  The way to read and write such
a slot must be given when the slot is defined with the
,(code ":slot-ref") and ,(code ":slot-set!") slot options.])

(p [A complete definition of the ,(code "<circle>") class
using virtual slots could be:])
   (fontified-code [
(define-class <circle> (<point>)
  ((radius :init-form 0 :accessor radius :init-keyword :radius)
   (area :allocation :virtual :accessor area
	 :slot-ref (lambda (o)
		     (let ((r (radius o)))
		       (* 3.14 r r)))
	 :slot-set! (lambda (o v)
		      (set! (radius o) (sqrt (/ v 3.14)))))))
])

(p [Here is an example using this definition of ,(code "<circle>")])

   (fontified-code [
(define c (make <circle> :radius 1))
(radius c)   ,(symbol-arrow) 1
(area c)     ,(symbol-arrow) 3.14
(set! (area x) (* 4 (area x)))
(area c)     ,(symbol-arrow) 12.56   ; (i.e. 4 * Pi)
(radius c)   ,(symbol-arrow) 2.0
])

(p [Of course, we can also used the fucntion ,(code "describe") to visualize
the slots of a given object. Applied to the prvious ,(code "c"), it prints:])

   (raw-code [
#\[<circle> 81b2348\] is an an instance of class <circle>.
Slots are:
     area = 12.56
     radius = 2.0
     x = 0
     y = 0
])
))


;;;;
;;;; Inheritance
;;;;
(subsection :title "Inheritance"

;; ** Class hierarchy and inheritance of slots **
(mark "inheritance")
(subsubsection :title "Class hierarchy and inheritance of slots"

   (p [Inheritance is specified upon class definition. As said in
the introduction, ,(stklos) supports multiple inheritance.
Hereafter are some classes definition: ])

   (fontified-code [
(define-class A () (a))
(define-class B () (b))
(define-class C () (c))
(define-class D (A B) (d a))
(define-class E (A C) (e c))
(define-class F (D E) (f))
])


   (p [,(code "A"), ,(code "B"), ,(code "C") have a null list of
super classes. In this case, the system will replace it by the
list which only contains ,(code "<object>"), the root of all the
classes defined by ,(code "define-class"). ,(code "D"),
,(code "E"), and ,(code "F") use multiple inheritance: each class
inherits from two previously defined classes.  Those class
definitions define a hierarchy which is shown in figure
,(ref :figure "a class hierarchy").
In this figure, the class ,(code "<top>") is also shown; this
class is the super class of all Scheme objects. In particular,
,(code "<top>") is the super class of all standard Scheme
types.])

   (figure :legend "a class hierarchy"
      (case *engine-type*
        ((tex) (image :width 80. :url "images/hierarchy.jpg"))
        (else  (center (image :url "images/hierarchy.jpg")))))


    (p [The set of slots of a given class is calculated by
,(q "unioning") the slots of all its super class. For instance,
each instance of the class ,(code "D") defined before will have three
slots (,(code "a"), ,(code "b") and ,(code "d")). The slots of a
class can be obtained by the ,(code "class-slots") primitive.  For
instance, ])

   (fontified-code [
(class-slots A) ,(symbol-arrow) (a)
(class-slots E) ,(symbol-arrow) (a e c)
(class-slots F) ,(symbol-arrow) (b e c d a f)
])

   (p [,(bold "Note:") The order of slots is not significant.]))


;; ** Class precedence list **
(subsubsection :title "Class precedence list"

(index "class precedence list")
(p [A class may have more than one superclass.,(footnote [
This section is an adaptation of Jeff Dalton's
(J.Dalton@ed.ac.uk) ,(q (emph "Brief introduction to CLOS"))
which can be found at the URL
,(ref :url "http://www.aiai.ed.ac.uk/~jeff/clos-guide.html" )])

With single inheritance (only one superclass), it is easy to
order the super classes from most to least specific.  This is the
rule:])
(blockquote (frame :width (max-line)
   (bold [Rule 1: Each class is more specific than
its superclasses.])))

   (p [With multiple inheritance, ordering is harder.  Suppose we
have])

(fontified-code [
(define-class X ()
   ((x :init-form 1)))

(define-class Y ()
   ((x :init-form 2)))

(define-class Z (X Y)
   (z :init-form 3))
])

   (p [In this case, given Rule 1, the ,(code "Z") class is more
specific than the ,(code "X") or ,(code "Y") class for instances
of ,(code "Z").  However, the ,(code ":init-form") specified in
,(code "X") and ,(code "Y") leads to a problem: which one
overrides the other?  Or, stated differently, which is the
default initial value of the ,(code "x") slot of a ,(code "Z")
instance.  The rule in ,(stklos), as in CLOS, is that the
superclasses listed earlier are more specific than those listed
later.  So: ])

(blockquote (frame :width (max-line)
   (bold [Rule 2: For a given class, superclasses listed earlier
are more specific than those listed later.])))

(p [These rules are used to compute a linear order for a
class and all its superclasses, from most specific to least
specific.  This order is called the ,(q (emph [class precedence
list])) of the class.  Given these two rules, we can claim that
the initial form for the ,(code "x") slot of previous example
is 1 since the class ,(code "X") is placed before ,(code "Y") in the
super classes of ,(code "Z").  These two rules are not always
sufficient to determine a unique order.  However, they give an
idea of how the things work. ,(stklos) algorithm for
calculating the class precedence list of a class is a little
simpler than the CLOS one described in (ref :bib "AMOP") for breaking
ties.  Consequently, the calculated class precedence list by
,(stklos) algorithm can be different than the one given by
the CLOS one in some subtle situations.  Taking
the ,(code "F") class shown in Figure ,(ref :figure "a class hierarchy"),
the ,(stklos) calculated class precedence list is])

(raw-code [(f d e a b c <object> <top>)])

(p [whereas it would be the following list with a CLOS-like
algorithm:])

   (raw-code [(f d e a c b <object> <top>)])

(index "class-precedence-list")
(p [However, it is usually considered a bad idea for programmers
to rely on exactly what the order is.  If the order for some
superclasses is important, it can be expressed directly in the
class definition.  The precedence list of a class can be obtained
by the function ,(code "class-precedence-list").  This function
returns a ordered list whose first element is the most specific
class.  For instance,])


    (raw-code [
(class-precedence-list D)
    ,(symbol-arrow) (#\[<class> d 81aebb8\] #\[<class> a 81aab88\]
  #\[<class> b 81aa720\] #\[<class> <object> 80eff90\]
  #\[<class> <top> 80effa8\])
])

(index "class-name")
(p [However, this result is not too much readable; using the
function ,(code "class-name") yields a clearer result:])

   (fontified-code [
(map class-name (class-precedence-list D))
  ,(symbol-arrow) (d a b <object> <top>)
])))



;;;;
;;;; Generic functions
;;;;
(index "generic function")
(subsection :title "Generic function"
(subsubsection :title "Generic functions and methods"


(index "method")
(index "method" :note "more specific")

(p [Neither ,(stklos) nor CLOS use the message passing mechanism
for methods as most Object Oriented languages do.  Instead, they
use the notion of ,(emph "generic function").A generic function
can be seen as a ,(q (emph "tanker")) of methods.  When the
evaluator requests the application of a generic function, all the
applicable methods of this generic function will be grabbed and
the most specific among them will be applied.  We say that a
method ,(code "M") is ,(emph "more specific") than a method ,(code "M'")
if the class of its parameters are more specific than the ,(code "M'")
ones.  To be more precise, when a generic function must be
,(q (emph "called")) the system])

(enumerate
   (item [searchs among all the generic function methods those which
are applicable (i.e.  the ones which filter on types which are
,(emph "compatible") with the actual argument list),])
   (item [sorts the list of applicable methods in the ,(q (emph "most specific"))
order,])
   (item [calls the most specific method of this list (i.e.  the
first of the list of sorted methods).]))

   (index "define-generic")
   (index "define-macro")
   (p [The definition of a generic function is done with the
,(code "define-generic") macro. Definition of a new method is
done with the ,(code "define-method") macro.])

   (p [Consider the following definitions:])

   (fontified-code [
(define-generic M)
(define-method M((a <integer>) b) 'integer)
(define-method M((a <real>)    b) 'real)
(define-method M(a b)             'top)
])

   (p [The ,(code "define-generic") call defines ,(code "M") as a
generic function.  Note that the signature of the generic
function is not given upon definition, contrarily to CLOS.  This
permits methods with different signatures for a given generic
function, as we shall see later.  The three next lines define
methods for the ,(code "M") generic function.  Each method uses a
sequence of ,(emph "parameter specializers") that specify when
the given method is applicable.  A specializer permits to
indicate the class a parameter must belong (directly or
indirectly) to be applicable.  If no specializer is given, the
system defaults it to ,(code "<top>")>.  Thus, the first method
definition is equivalent to])

   (fontified-code [
(define-method M((a <integer>) (b <top>)) 'integer)
])

   (p [Now, let us look at some possible calls to generic
function ,(code "M"):])

   (fontified-code [
(M 2 3)      ,(symbol-arrow) integer
(M 2 #t)     ,(symbol-arrow) integer
(M 1.2 'a)   ,(symbol-arrow) real
(M #t #f)    ,(symbol-arrow) top
(M 1 2 3)    ,(symbol-arrow) ,(color :fg "red" "error") ,(emph "no method with 3 parameters")
])

(p [The preceding methods use only one specializer per parameter
list. Of course, each parameter can use a specializer.  In this
case, the parameter list is scanned from left to right to
determine the applicability of a method.  Suppose we declare now])

(fontified-code [
(define-method M ((a <integer>) (b <number>))
    'integer-number)

(define-method M ((a <integer>) (b <real>))
    'integer-real)

(define-method M (a (b <number>))
    'top-number)

(define-method M (a b c)
    'three-parameters)
])

   (p [In this case,])

   (fontified-code [
(M 1 2)     ,(symbol-arrow) integer-integer
(M 1 1.0)   ,(symbol-arrow) integer-real
(M 'a 1)    ,(symbol-arrow) top-number
(M 1 2 3)   ,(symbol-arrow) three-parameters
])


(p (bold "Notes: ")
(enumerate
   (item [Before defining a new generic
function,(code "define-generic,") verifies if the symbol given as
parameter is already bound to a procedure in the current
environment.  If so, this procedure is added, as a method to the
newly created generic function.
For instance:
,(fontified-code [
(define-generic log)  ; transform "log" in a generic function
(define-method log ((s <string>) . l)
   (apply format  (current-error-port) s l)
   (newline (current-error-port)))
(log "Hello, ~a" "world")      ,(symbol-print) Hello, world
(log 1)                        ,(symbol-arrow) 0 ; standard "log" procedure
])])

   (item [,(code "define-method") automatically defines the
generic function if it has not been defined before.
Consequently, most of the time, the ,(code "define-generic") is
not needed.]))))

(index "Method" :note "next")
(index "next-method")
(subsubsection :title "Next-method"

   (p [When a generic function is called, the list of applicable
methods is built.  As mentioned before, the most specific method
of this list is applied (see
,(ref :subsubsection "Generic functions and methods")).
This method may call, if needed, the next method in the list of
applicable methods.  This is done by using the special form
,(code "next-method").  Consider the following definitions])

      (fontified-code [
(define-method Test((a <integer>))
   (cons 'integer (next-method)))

(define-method Test((a <number>))
   (cons 'number  (next-method)))

(define-method Test(a)
   (list 'top))
])

(p [With those definitions, we have:])

(fontified-code [
(Test 1)     ,(symbol-arrow) (integer number top)
(Test 1.0)   ,(symbol-arrow) (number top)
(Test #t)    ,(symbol-arrow) (top)
]))


(subsubsection :title "Standard  generic functions"

(index "write") (index "display")

;;;; Printing Objects ..................
(p (bold "Printing objects"))
(p [When the Scheme primitives ,(code "write") or
,(code "display") are called with a parameter which is an object,
the ,(code "write-object") or ,(code "display-object") generic
functions are called with this object and the port to which the
printing must be done as parameters.  This facility permits to
define a customized printing for a class of objects by simply
defining a new method for this class.  So, defining a new
printing method overloads the standard printing method
(which just prints the class of the object and its hexadecimal
address).])

(p [For instance, we can define a customized printing for the ,(code "<point>")
used before as:])
   (fontified-code [
(define-method display-object ((p <point>) port)
  (format port "{Point x=~S y=~S}" (slot-ref p 'x) (slot-ref p 'y)))
])

(p [With this definition, we have])
(fontified-code [
(define p (make <point> :x 1 :y 2))
(display p)     ,(symbol-print) {Point x=1 y=2}
])

  (p [The Scheme primitive ,(code "write") tries to write
objects, in such a way that they are readable back with the ,(code "read")
primitive.  Consequently, we can define the writing of a ,(code "<point>")
as a form which, when read, will build back this point:])

  (fontified-code [
(define-method write-object ((p <point>) port)
 (format port "#,(make <point> :x ~S :y ~S)"
              (get-x p) (get-y p)))
])

  (p [With this method, writing the ,(code "p") point defined before
prints the following text on the output port:])

  (fontified-code "#,(make <point> :x 1 :y 2)")

(p [Note here the usage of the ,(q (code "#,"))  notation of ,(link-srfi 10)
to ,(q "evaluate") the form when reading it,(footnote [We suppose here that
we are in a context where 
,(fontified-code [(define-reader-ctor 'make (lambda l (eval `(make ,@l))))])
as already been evaluated]).])

;;;; Comparing Objects ..................
(p (bold "Comparing objects"))

(p [When objects are compared with the ,(code "eqv?")  or
,(code "equal?")  Scheme standard primitives, ,(stklos)
calls the ,(code "object-eqv?")  or ,(code "object-equal?")
generic functions.  This facility permits to define a
customized comparison function for a class of objects by simply
defining a new method for this class.  Defining a new
comparison method overloads the standard comparaison method
(which always returns ,(code "#f")).  For instance we could
define the following method to compare points:])

(fontified-code [
(define-method object-eqv? ((a <point>) (b <point>))
  (and (= (point-x a) (point-x b))
       (= (point-y a) (point-y b))))
]))))

(section :title "Object System Reference"
   (subsection :title "Class Definition"))

(section :title "Main Functions and sytaxes"
        
   (insertdoc 'define-class)
   (insertdoc 'find-class)
   (insertdoc 'is-a?)
   )

) ; End of chapter








