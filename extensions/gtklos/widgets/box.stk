;;;;
;;;; box.stk    -- Vertical and Horizontal GTk Boxes
;;;;
;;;; Copyright Â© 2001-2021 Erick Gallesio - I3S-CNRS/ESSI <eg@unice.fr>
;;;;
;;;;
;;;; This program is free software; you can redistribute it and/or modify
;;;; it under the terms of the GNU General Public License as published by
;;;; the Free Software Foundation; either version 2 of the License, or
;;;; (at your option) any later version.
;;;;
;;;; This program is distributed in the hope that it will be useful,
;;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;;; GNU General Public License for more details.
;;;;
;;;; You should have received a copy of the GNU General Public License
;;;; along with this program; if not, write to the Free Software
;;;; Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307,
;;;; USA.
;;;;
;;;;           Author: Erick Gallesio [eg@unice.fr]
;;;;    Creation date: 25-May-2001 15:44 (eg)
;;;; Last file update: 11-Jun-2021 12:59 (eg)
;;;;


;;;
;;; GTK Bindings
;;;
(define-gtk gtk-box-new (#:long #:long) :pointer "gtk_box_new")
(define-gtk gtk-box-pack-start (#:pointer #:pointer :boolean #:boolean :long) #:void
  "gtk_box_pack_start")
(define-gtk gtk-box-pack-end(#:pointer #:pointer #:boolean #:boolean #:long) #:void
  "gtk_box_pack_end")
(define-gtk gtk-orientable-set-orientation (#:pointer #:long) #:void
  "gtk_orientable_set_orientation")
(define-gtk gtk-orientable-get-orientation (#:pointer) #:long
  "gtk_orientable_get_orientation")


(define (orientation->int orient)
  (case orient
    ((horizontal) 0)
    ((vertical)   1)
    (else (error "bad orientation value: ~S\n" orient))))

(define (int->orientation orient)
  (if (zero? orient) 'horizontal 'vertical))
  
;======================================================================
;
;                 C l a s s    < b o x >
;
;======================================================================
(define-class <box> (<gtk-container> <gtk-widget>)
  ((expand             #:accessor       expand
                       #:init-keyword   #:expand
                       #:init-form      #f)
   (fill               #:accessor       fill
                       #:init-keyword   #:fill
                       #:init-form      #f)
   (padding            #:accessor       padding
                       #:init-keyword   #:padding
                       #:init-form      0)
   (homogeneous        #:accessor       homogeneous
                       #:init-keyword   #:homogeneous
                       #:allocation     #:gtk-property)
   (spacing            #:accessor       spacing
                       #:init-keyword   #:spacing
                       #:allocation     #:gtk-property
                       #:init-form      0)
   (orientation        #:accessor       orientation
                       #:init-keyword   #:orientation
                       #:allocation     #:virtual
                       #:slot-ref       (lambda (o)
                                          (int->orientation
                                             (gtk-orientable-get-orientation
                                                (slot-ref o 'wid))))
                       #:slot-set!      (lambda (o v)
                                          (let ((v (orientation->int v)))
                                            (gtk-orientable-set-orientation
                                                 (slot-ref o 'wid) v))))
   (baseline-position  #:accessor       baseline-position
                       #:init-keyword   #:baseline-position
                       #:allocation     #:gtk-property)))

;;;;
;;;; Methods for Boxes
;;;;
(define-method container-add! ((cont <box>) widget
                               #:key (expand  (slot-ref cont 'expand))
                                     (fill    (slot-ref cont 'fill))
                                     (padding (slot-ref cont 'padding))
                                     (end     #f))
  (let ((c    (slot-ref cont   'wid))
        (w    (slot-ref widget 'wid))
        (func (if end gtk-box-pack-end gtk-box-pack-start)))
    (eprintf "CONTAINER-ADD ~S ~S ~S ~S ~S ~S !\n" func c w expand fill padding)
    (func c w expand fill padding)))


(define-method realize-widget ((self <box>) initargs)
  (let* ((orient (key-get initargs #:orientation 'vertical))
         (space  (key-get initargs #:spacing 0))
         (box    (gtk-box-new (orientation->int orient) space)))
      (cpointer-type-set! box 'gtk-box)
      (slot-set! self 'wid box)))


;;//(define-method %container-place ((cont <box>) widget
;;//                 #:key (expand  #t expand?)
;;//                      (fill    #t fill?)
;;//                      (padding 0  padding?))
;;// (let ((c (slot-ref cont   'wid))
;;//       (w (slot-ref widget 'wid)))
;;//   (when expand?  (%child-set! c w #:expand  expand))
;;//   (when padding? (%child-set! c w #:padding padding))
;;//   (when fill?    (%child-set! c w #:fill    fill)))
;;// (void))


;;// TODO: ;; ======================================================================
;;// TODO: ;;
;;// TODO: ;;          C O N T A I N E R - I N F O
;;// TODO: ;;
;;// TODO: ;; ======================================================================
;;// TODO: (define-method %container-info ((parent <box>) widget)
;;// TODO:   (let* ((w (wid widget))
;;// TODO:          (c (wid parent))
;;// TODO:          (i (gtk-box-query-child-packing c w)))
;;// TODO:     (list #:parent  parent
;;// TODO:           #:expand  (car i)
;;// TODO:           #:fill    (cadr i)
;;// TODO:           #:padding (caddr i)
;;// TODO:           #:end     (cadddr i))))
;;// TODO:


;;;
;;; Module exports
;;;
(export <box>
        ;; accessors
        expand fill padding homogeneous spacing orientation)
