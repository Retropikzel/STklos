;;;;
;;;; widget.stk                                 -- GTK widget
;;;;
;;;; Copyright © 2001-2021 Erick Gallesio - I3S-CNRS/ESSI <eg@unice.fr>
;;;;
;;;;
;;;; This program is free software; you can redistribute it and/or modify
;;;; it under the terms of the GNU General Public License as published by
;;;; the Free Software Foundation; either version 2 of the License, or
;;;; (at your option) any later version.
;;;;
;;;; This program is distributed in the hope that it will be useful,
;;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;;; GNU General Public License for more details.
;;;;
;;;; You should have received a copy of the GNU General Public License
;;;; along with this program; if not, write to the Free Software
;;;; Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307,
;;;; USA.
;;;;
;;;;           Author: Erick Gallesio [eg@unice.fr]
;;;;    Creation date: 30-May-2001 18:30 (eg)
;;;; Last file update: 11-Jun-2021 18:38 (eg)
;;;;


;;;;
;;;; GTK Bindings
;;;;
(define-gtk gtk-widget-destroy    (:pointer) :void    "gtk_widget_destroy")
(define-gtk gtk-widget-show       (:pointer) :void    "gtk_widget_show")
(define-gtk gtk-widget-show-all   (:pointer) :void    "gtk_widget_show_all")
(define-gtk gtk-widget-get-parent (:pointer) :pointer "gtk_widget_get_parent")

(define-generic realize-widget)
(define-generic internal-arrange-widget)


;;;; ======================================================================
;;;;
;;;;    <gtk-object> class ...
;;;;
;;;; ======================================================================
(define-class <gtk-object> ()
  ()
  #:metaclass <gtk-virtual-slots-metaclass>)


;;;; ======================================================================
;;;;
;;;;    <destroyed-object> class ...
;;;;
;;;; ======================================================================
(define-class <destroyed-object> () ())


;;;; ======================================================================
;;;;
;;;;    <gtk-widget> class ...
;;;;
;;;; ======================================================================
(define (%widget-data-get widget key default)
  (key-get (slot-ref widget '%data) key default))

(define (%widget-data-set! widget key value)
  (let ((data (slot-ref widget '%data)))
    (slot-set! widget
               '%data
               (key-set! data key value))))

(define-class <gtk-widget> (<gtk-object>)
  ((wid         #:getter         wid)            ;; Widget Id
   (%event      #:init-form      '())            ;; Private event handler
   (%data       #:init-form      '())            ;; Private data
   (show        #:init-form      #t
                #:init-keyword   #:show)
   (parent      #:accessor       parent
                #:init-keyword   #:parent
                #:allocation     #:virtual
                #:slot-ref       (lambda (o)
                                   (let ((p (gtk-widget-get-parent (slot-ref o 'wid))))
                                     (if (eq? p #void) #f (diw p))))
                #:slot-set!      (lambda (o v)
                                   ;;// PROBLEM
                                   (if (pair? v)
                                       (apply container-add! (car v) o (cdr v))
                                       (container-add! v o))))
   (can-default #:accessor       can-default
                #:init-keyword   #:can-default
                #:allocation     #:gtk-property)
   (can-focus   #:accessor       can-focus
                #:init-keyword   #:can-focus
                #:allocation     #:gtk-property)
   (has-default #:accessor       has-default
                #:init-keyword   #:has-default
                #:allocation     #:gtk-property)
   (has-focus   #:accessor       has-focus
                #:init-keyword   #:has-focus
                #:allocation     #:gtk-property)
   (height-request
                #:accessor       height-request
                #:init-keyword   #:height-request
                #:allocation     #:gtk-property)
   (name        #:accessor       name
                #:init-keyword  #:name
                #:allocation    #:gtk-property)
   (visible     #:accessor      visible
                #:init-keyword  #:visible
                #:allocation    #:gtk-property)
   (sensitive   #:accessor      sensitive
                #:init-keyword  #:sensitive
                #:allocation    #:gtk-property)
   (width-request
                #:accessor     width-request
                #:init-keyword #:width-request
                #:allocation   #:gtk-property)
;;// TODO:   (width       #:accessor     width
;;// TODO:                #:init-keyword #:width
;;// TODO:                #:allocation   #:virtual
;;// TODO:                #:slot-ref     gtklos-width
;;// TODO:                #:slot-set!    (lambda (o v)
;;// TODO:                                 (let ((h (slot-ref o 'height-request)))
;;// TODO:                                   (gtk-widget-set-size-request (slot-ref o 'wid)
;;// TODO:                                                                v
;;// TODO:                                                                h))))
;;// TODO:   (height      #:accessor     height
;;// TODO:                #:init-keyword #:height
;;// TODO:                #:allocation   #:virtual
;;// TODO:                #:slot-ref     gtklos-height
;;// TODO:                #:slot-set!    (lambda (o v)
;;// TODO:                                 (let ((w (slot-ref o 'width-request)))
;;// TODO:                                   (gtk-widget-set-size-request (slot-ref o 'wid)
;;// TODO:                                                                w
;;// TODO:                                                                v))))
#;   (font-name #:accessor       font-name
                #:init-keyword   #:font-name
                #:allocation     #:gtk-property
                #:gtk-name       "gtk-font-name")

;;//   (event   #:accessor       event
;;//            #:init-keyword   #:event
;;//            #:allocation     #:virtual
;;//            #:slot-ref       (lambda (o)
;;//                              (slot-ref o '%event))
;;//            #:slot-set!      (lambda (o v)
;;//                              (let ((old-event (slot-ref o '%event)))
;;//                                (when old-event
;;//                                  (disconnect-event-handler! old-event o))
;;//                                (connect-event-handler! v o)
;;//                                (slot-set! o '%event v))))
;;//   (widget-data #:accessor     widget-data
;;//            #:init-keyword #:widget-data
;;//            #:init-form    #f)

;;              #:allocation   #:virtual ;; to ensure that can-default is #t
;;//            #:slot-ref     (lambda (o)
;;//                            (%gtk-arg-get (slot-ref o 'wid) #:has_default))
;;//            #:slot-set!    (lambda (o v)
;;//                            (unless (slot-ref o 'can-default)
;;//                              ;; Force can-default to avoid GTK warning
;;//                              (slot-set! o 'can-default #t))
;;//                            (update)
;;//                            (%gtk-arg-set! (slot-ref o 'wid) #:has_default v)
;;//                            (update)))
;;//TODO:   (tooltip     #:accessor     tooltip
;;//TODO:                #:init-form    #f
;;//TODO:                #:init-keyword #:tooltip
;;//TODO:                #:allocation   #:virtual
;;//TODO:                #:slot-ref     (lambda (o)
;;//TODO:                                 (%widget-data-get o #:tooltip #f))
;;//TODO:                #:slot-set!    (lambda (o v)
;;//TODO:                                 (let ((tt (%widget-data-get o #:tooltip #f)))
;;//TODO:                                   (unless tt
;;//TODO:                                     (set! tt (gtk-tooltips-new))
;;//TODO:                                     (%widget-data-set! o #:tooltip tt))
;;//TODO:                                   (if v
;;//TODO:                                       (let ((wid (slot-ref o 'wid)))
;;//TODO:                                         (gtk-tooltips-enable tt)
;;//TODO:                                         (gtk-tooltips-set-tip tt wid v ""))
;;//TODO:                                       (when tt
;;//TODO:                                         (gtk-tooltips-disable tt)))
;;//TODO:                                   ;; Finally set
;;//TODO:                                   (%widget-data-set! o #:tooltip v))))
   ))

;======================================================================
;
;                       Methods for Widgets
;
;======================================================================
(define-method realize-widget ((self <gtk-widget>) initargs)
  (eprintf "Realize-widget <gtk-widget>\n")
  ;; Do nothing
  #f)

(define-method internal-arrange-widget ((self <gtk-widget>) initargs)
  (eprintf "Internal-arrange <gtk-widget>\n")
  ;; Do nothing
  #f)


(define-method initialize ((self <gtk-widget>) initargs)
  ;; Initialize %data slot as soon as possible
  (slot-set! self '%data '())
  (realize-widget self initargs)
  ;;(eprintf "NEXT sur ~S\n" self)
  (next-method self initargs)
  ;;(eprintf "retour NEXT sur ~S\n" self)
  (internal-arrange-widget self initargs)
  (let ((wid (slot-ref self 'wid)))
    ;; Show object (eventually)
    (when (slot-ref self 'show)
      (eprintf "Showing ~s\n" self)
      (gtk-widget-show wid))
    ;; Store self in GTk+ object to allow GTK <-> Scheme conversions
    (gtklos-wid-associate wid self)))


;;;
;;; Destroy
;;;
(define-method destroy ((w <gtk-widget>))
;;//  (let ((event (slot-ref w '%event)))               ; Disconnect w from its  handler
;;//    (when event
;;//      (disconnect-event-handler! event w)))
  (gtk-widget-destroy (wid w))                  ; destroy the GTK widget
  (change-class w <destroyed-object>))          ; Change class to <destroyed-object>


(define-method destroy (w)
  #f)

;;//FIXME: ;;;
;;//FIXME: ;;; Event connection
;;//FIXME: ;;;
;;//FIXME: (define-method event-connect ((widget <gtk-widget>) name closure)
;;//FIXME:   (%signal-connect widget (slot-ref widget 'wid) name closure #f))
;;//FIXME: 
;;//FIXME: (define-method event-connect-after ((widget <gtk-widget>) name closure)
;;//FIXME:   (%signal-connect widget (slot-ref widget 'wid) name closure #t))
;;//FIXME: 
;;;; ======================================================================
;;;;
;;;;    <gtk-misc> class ...
;;;;
;;;; ======================================================================
 (define-class <gtk-misc> (<gtk-widget>)
   ((xalign      #:accessor     xalign
                 #:init-keyword #:xalign
                 #:allocation   #:gtk-property)
    (yalign      #:accessor     yalign
                 #:init-keyword #:yalign
                 #:allocation   #:gtk-property)
    (xpad        #:accessor     xpad
                 #:init-keyword #:xpad
                 #:allocation   #:gtk-property)
    (ypad        #:accessor     ypad
                 #:init-keyword #:ypad
                 #:allocation   #:gtk-property)))


;;;
;;; Module exports
;;;
(export  ;; accessors
         parent can-default has-default has-focus height-request name visible
         sensitive width-request xalign yalign xpad ypad
         ;; methods
         destroy)
