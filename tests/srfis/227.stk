(let ()
  (define f
    (opt*-lambda (x (y 1) (z (* x x)))
                 (list x y z)))

  (test "srfi-227.1" '(1 2 3) (f 1 2 3))
  (test "srfi-227.2" '(2 3 4) (f 2 3))
  (test "srfi-227.3" '(2 1 4) (f 2))
)

(let ()
  (define g
    (let ([x 4])
      (opt-lambda (x (y 1) (z (* x x)))
        (list x y z))))

  (test "srfi-227.4" '(1 2 3) (g 1 2 3))
  (test "srfi-227.5" '(2 3 16) (g 2 3))
  (test "srfi-227.6" '(2 1 16) (g 2))
)

(let ()
  (define h
    (opt-lambda args args))

  (test "srfi-227.7" '(1 2) (h 1 2))

  (test "srfi-227.8" '(1 (2))
        (let-optionals
             '(1 2)
             (x . y)
          (list x y)))

  (test "srfi-227.9" '(1 2 3)
        (let-optionals
             '(1)
             (x (y 2) (z 3))
           (list x y z)))

  (test "srfi-227.10" '(1 3 4)
        (let-optionals*
            '(1 3)
            (x (y 2) (z (+ x y)))
          (list x y z)))

  (test "srfi-227.11" '(0 1)
        (let* ()
          (define-optionals (f x (y 1))
            (list x y))
          (f 0)))

  (test "srfi-227.12" '(3 9 ())
        (let* ()
          (define-optionals* (f x (y (* x x)) . z)
            (list x y z))
          (f 3)))
)

;; Tests of the SRFI document

(let ()
  (define f
    (opt-lambda (a b (c 1) (d 2) . r)
      (list a b c d r)))

  (test "doc.1" '(1 2 1 2 ()) (f 1 2))
  (test "doc.2" '(1 2 3 2 ()) (f 1 2 3))
  (test "doc.3" '(1 2 3 4 ()) (f 1 2 3 4))
  (test "doc.4" '(1 2 3 4 (5)) (f 1 2 3 4 5))
  )

(let ()
  (define n 1)
  (define g (opt-lambda (n (m (* n 2))) (list n m)))

  (test "doc.5" '(2 2) (g 2))
  (test "doc.6" '(2 3) (g 2 3))

  (set! n 2)
  (test "doc.7" '(1 4) (g 1))
  (test "doc.8" '(1 2) (g 1 2))
)

(let ()
  (define n 2)
  (define g* (opt*-lambda (n (m (* n 2))) (list n m)))

  (set! n 1)
  (test "doc.9" '(2 4) (g* 2))
  (test "doc.10" '(2 3) (g* 2 3))

  (test "doc.11" '(1 (2))
        (let-optionals '(1 2)
                       (x . y)
          (list x y)))

  (test "doc.12"
        '(1 2 3)
        (let-optionals '(1)
                       (x (y 2) (z 3))
          (list x y z)))

  (test "doc.13" '(1 3 4)
        (let-optionals* '(1 3)
                        (x (y 2) (z (+ x y)))
                        (list x y z)))
  )

(let ()
  (define-optionals (f1 x (y 1))
    (list x y))

  (define-optionals* (f2 x (y (* x x)) . z)
    (list x y z))

  (test "doc.14" '(0 1) (f1 0))
  (test "doc.15" '(3 9 ()) (f2 3))
)
