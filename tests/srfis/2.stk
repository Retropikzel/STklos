;; ----------------------------------------------------------------------
;;  SRFI 2 ...
;; ----------------------------------------------------------------------

(test "and-let*.1" 1  (and-let* () 1))
(test "and-let*.2" 2  (and-let* () 1 2))
(test "and-let*.3" #t (and-let* () ))
(test "and-let*.4" #f  (let ((x #f)) (and-let* (x))))
(test "and-let*.5" 1   (let ((x 1)) (and-let* (x))))
(test "and-let*.6" #f  (and-let* ((x #f)) ))
(test "and-let*.7" 1   (and-let* ((x 1)) ))

;; TEST/ERROR:
;; Syntax error, can't be detected by test/error
;; (test/error "and-let*.8" (and-let* ( #f (x 1))))

(test "and-let*.9" #f (and-let* ( (#f) (x 1))))

;; TEST/ERROR:
;; Syntax error, can't be detected by test/error
;; (test/error "and-let*.10" (and-let* (2 (x 1))) )

(test "and-let*.11" 1  (and-let* ( (2) (x 1)) ))
(test "and-let*.12" 2  (and-let* ( (x 1) (2)) ))
(test "and-let*.13" #f (let ((x #f)) (and-let* (x) x)))
(test "and-let*.14" "" (let ((x "")) (and-let* (x) x)))
(test "and-let*.15" "" (let ((x "")) (and-let* (x)  )))
(test "and-let*.16" 2  (let ((x 1)) (and-let* (x) (+ x 1))))
(test "and-let*.17" #f (let ((x #f)) (and-let* (x) (+ x 1))))
(test "and-let*.18" 2  (let ((x 1)) (and-let* (((positive? x))) (+ x 1))))
(test "and-let*.19" #t (let ((x 1)) (and-let* (((positive? x))) )))
(test "and-let*.20" #f (let ((x 0)) (and-let* (((positive? x))) (+ x 1))))
(test "and-let*.21" 3  (let ((x 1))
                         (and-let* (((positive? x)) (x (+ x 1))) (+ x 1))))

;; TEST/ERROR:
;; Syntax error, can't be detected by test/error
;; (test/error "and-let*.22" (let ((x 1))
;;                             (and-let* (((positive? x)) (x (+ x 1)) (x (+ x 1)))
;;                                       (+ x 1))))

(test "and-let*.23" 2  (let ((x 1)) (and-let* (x ((positive? x))) (+ x 1))))
(test "and-let*.24" 2  (let ((x 1))
                         (and-let* ( ((begin x)) ((positive? x))) (+ x 1))))
(test "and-let*.25" #f (let ((x 0)) (and-let* (x ((positive? x))) (+ x 1))))
(test "and-let*.26" #f (let ((x #f)) (and-let* (x ((positive? x))) (+ x 1))))
(test "and-let*.27" #f (let ((x #f))
                         (and-let* ( ((begin x)) ((positive? x))) (+ x 1))))
(test "and-let*.28" #f (let ((x 1))
                         (and-let* (x (y (- x 1)) ((positive? y))) (/ x y))))
(test "and-let*.29" #f (let ((x 0))
                         (and-let* (x (y (- x 1)) ((positive? y))) (/ x y))))
(test "and-let*.30" #f (let ((x #f))
                         (and-let* (x (y (- x 1)) ((positive? y))) (/ x y))))
(test "and-let*.31" 3/2 (let ((x 3))
                          (and-let* (x (y (- x 1)) ((positive? y))) (/ x y))))
